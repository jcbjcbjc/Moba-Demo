System.register(["__unresolved_0", "__unresolved_1", "__unresolved_2"], function (_export, _context) {
  "use strict";

  var _req, _req2, _loader, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _req = _unresolved_.__cjsMetaURL;
    }, function (_unresolved_2) {
      _req2 = _unresolved_2.__cjsMetaURL;
    }, function (_unresolved_3) {
      _loader = _unresolved_3.default;
    }],
    execute: function () {
      _loader.define(_context.meta.url, function (exports, _require, module, __filename, __dirname) {
        var require = _loader.createRequireWithReqMap({
          "./reader": _req,
          "./util/minimal": _req2
        }, _require);

        (function () {
          module.exports = BufferReader; // extends Reader

          var Reader = require("./reader");

          (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;

          var util = require("./util/minimal");
          /**
           * Constructs a new buffer reader instance.
           * @classdesc Wire format reader using node buffers.
           * @extends Reader
           * @constructor
           * @param {Buffer} buffer Buffer to read from
           */


          function BufferReader(buffer) {
            Reader.call(this, buffer);
            /**
             * Read buffer.
             * @name BufferReader#buf
             * @type {Buffer}
             */
          }

          BufferReader._configure = function () {
            /* istanbul ignore else */
            if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;
          };
          /**
           * @override
           */


          BufferReader.prototype.string = function read_string_buffer() {
            var len = this.uint32(); // modifies pos

            return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
          };
          /**
           * Reads a sequence of bytes preceeded by its length as a varint.
           * @name BufferReader#bytes
           * @function
           * @returns {Buffer} Value read
           */


          BufferReader._configure();
        })();

        _export("default", _cjsExports = module.exports);
      });

      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);
    }
  };
});
//# sourceMappingURL=reader_buffer.js.map