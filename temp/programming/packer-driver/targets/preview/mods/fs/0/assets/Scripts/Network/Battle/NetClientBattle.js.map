{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/Network/Battle/NetClientBattle.ts"],"names":["NetClientBattle","LogUtil","proto2","NetConfig","MessageDispatch","NetMessageRequest2","NetMessageResponse2","Init","addEvents","Instance","_socket","onmessage","onReceiveMessage","onopen","onSocketOpen","onclose","onSocketClose","onerror","onSocketError","log","connected","pendingMessage","SendMessage","reconnect","closeCurrentSocket","event","netMessage","decode","Uint8Array","data","Dispatch","Connect","WebSocket","websocketBattleUrl","binaryType","setTimeout","message","msg","encode","finish","send","close"],"mappings":"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","sourcesContent":["import { LogUtil } from \"../../Log/LogUtil\";\r\nimport { SocketConst } from \"./../SocketConst\";\r\nimport { Socket, director } from \"cc\";\r\nimport proto2  from '../../../Proto/Battle/proto.js';\r\nimport { EventManager } from \"../../UI/Common/Event/EventManager\";\r\nimport { NetConfig } from \"./../NetConfig\";\r\nimport { MessageDispatch } from \"./../MessageDispatch\";\r\nimport { UserService } from \"../../Services/UserService\";\r\nimport { MessageBox, MessageBoxType } from \"../../UI/Common/MessageBox\";\r\nimport { EventType } from \"../../UI/Common/Event/EventType\";\r\nimport { User } from \"../../Models/User\";\r\nconst { NetMessageRequest2,NetMessageResponse2 }=proto2;\r\n\r\nexport class NetClientBattle{\r\n    public static Instance:NetClientBattle=new NetClientBattle();\r\n\r\n    public _socket:WebSocket=null as unknown as WebSocket;\r\n    public pendingMessage: NetMessageRequest2 = null as unknown as NetMessageRequest2;\r\n    public connected:boolean=false;\r\n\r\n    public Init(){\r\n\r\n    }\r\n\r\n    /**\r\n     * 添加事件监听\r\n     */\r\n    public addEvents() {\r\n        NetClientBattle.Instance._socket.onmessage=NetClientBattle.Instance.onReceiveMessage;\r\n        NetClientBattle.Instance._socket.onopen=NetClientBattle.Instance.onSocketOpen;\r\n        NetClientBattle.Instance._socket.onclose=NetClientBattle.Instance.onSocketClose;\r\n        NetClientBattle.Instance._socket.onerror=NetClientBattle.Instance.onSocketError;\r\n    }\r\n\r\n\r\n    /**\r\n     * 服务器连接成功\r\n     */\r\n    public onSocketOpen():void {\r\n        LogUtil.log(\"NetClientBattle 服务器连接成功\");\r\n        NetClientBattle.Instance.connected=true;\r\n        if(NetClientBattle.Instance.pendingMessage){\r\n            NetClientBattle.Instance.SendMessage(NetClientBattle.Instance.pendingMessage);\r\n        }\r\n        NetClientBattle.Instance.pendingMessage=null;\r\n    }\r\n\r\n    /**\r\n     * 服务器断开连接\r\n     */\r\n    public async onSocketClose() {\r\n        LogUtil.log(\"NetClientBattle 服务器断开连接\");\r\n        NetClientBattle.Instance.connected=false;\r\n        NetClientBattle.Instance.reconnect();\r\n    }\r\n\r\n    /**\r\n     * 服务器连接错误\r\n     */\r\n    public onSocketError():void {\r\n        LogUtil.log(\"NetClientBattle 服务器连接错误\");\r\n        NetClientBattle.Instance.connected=false;\r\n        NetClientBattle.Instance.closeCurrentSocket();\r\n        NetClientBattle.Instance.reconnect();\r\n    }\r\n\r\n    /**\r\n     * 收到服务器消息\r\n     * @param e\r\n     */\r\n    public  onReceiveMessage(event: MessageEvent):void {\r\n        let netMessage=NetMessageResponse2.decode(new Uint8Array(event.data));\r\n        // console.log('NetClientBattle 收到服务器消息：'+JSON.stringify(netMessage))\r\n        MessageDispatch.Dispatch(netMessage);\r\n    }\r\n\r\n\r\n    /**\r\n     * 开始Socket连接\r\n     */\r\n    public Connect():void {\r\n        NetClientBattle.Instance._socket = new WebSocket(NetConfig.websocketBattleUrl);\r\n        NetClientBattle.Instance._socket.binaryType=  \"arraybuffer\";\r\n        NetClientBattle.Instance.addEvents();\r\n    }\r\n\r\n    /**\r\n     * 重新连接\r\n     */\r\n    public reconnect():void {\r\n       setTimeout(function(){\r\n           NetClientBattle.Instance.Connect();\r\n       },5000)\r\n    }\r\n\r\n    /**\r\n     * 发送消息到服务器\r\n     * @param message\r\n     */\r\n    public SendMessage(message:NetMessageRequest2):void {\r\n        if(!NetClientBattle.Instance.connected){\r\n            NetClientBattle.Instance.pendingMessage=message;\r\n            return;\r\n        }\r\n        let msg=NetMessageRequest2.encode(message).finish();\r\n        // console.log('NetClientBattle SendMessage message='+JSON.stringify(message),msg)\r\n        NetClientBattle.Instance._socket.send(msg);\r\n    }\r\n\r\n    /**\r\n     * 清理当前的Socket连接\r\n     */\r\n    public closeCurrentSocket(){\r\n       if(NetClientBattle.Instance._socket){ \r\n         NetClientBattle.Instance._socket.close();\r\n       }\r\n       NetClientBattle.Instance._socket =null as unknown as WebSocket;\r\n    }\r\n\r\n}"]}