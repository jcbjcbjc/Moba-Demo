{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/node_modules/protobufjs/src/util/longbits.js"],"names":["module","exports","LongBits","util","require","lo","hi","zero","toNumber","zzEncode","zzDecode","length","zeroHash","fromNumber","value","sign","from","isString","Long","fromString","parseInt","low","high","prototype","unsigned","toLong","Boolean","charCodeAt","String","fromHash","hash","call","toHash","fromCharCode","mask","part0","part1","part2"],"mappings":"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","sourcesContent":["\"use strict\";\nmodule.exports = LongBits;\n\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n"]}