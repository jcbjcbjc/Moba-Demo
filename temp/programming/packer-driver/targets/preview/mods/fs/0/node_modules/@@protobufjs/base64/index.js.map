{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/node_modules/@protobufjs/base64/index.js"],"names":["base64","exports","length","string","p","n","charAt","Math","ceil","b64","Array","s64","i","encode","buffer","start","end","parts","chunk","j","t","b","push","String","fromCharCode","apply","slice","join","invalidEncoding","decode","offset","c","charCodeAt","undefined","Error","test"],"mappings":"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","sourcesContent":["\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n"]}