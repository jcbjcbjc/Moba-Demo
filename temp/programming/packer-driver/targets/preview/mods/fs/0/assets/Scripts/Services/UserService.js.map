{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/Services/UserService.ts"],"names":["UserService","director","LogUtil","proto","NetClient","MessageBox","MessageBoxType","EventManager","EventType","User","SoundManager","SoundDefine","TipsManager","ChatManager","NetMessage","NetMessageRequest","UserLoginRequest","Result","UserLoginResponse","UserRegisterRequest","UserRegisterResponse","UnLockRequest","UnLockResponse","CharacterDetailRequest","CharacterDetailResponse","SwitchCharacterRequest","SwitchCharacterResponse","AttrPromoteRequest","AttrPromoteType","AttrPromoteInfoResponse","CombatPowerRankingRequest","CombatPowerRankingResponse","FollowResponse","FollowRequest","UserStatusChangeResponse","HeartBeatRequest","HeartBeatResponse","UserStatusQueryRequest","UserStatusQueryResponse","Init","this_","Instance","addListener","OnUserLogin","OnUserRegister","OnUnLock","OnCharacterDetail","OnSwitchCharacter","OnAttrPromoteInfo","OnCombatPowerRanking","OnFollowRes","OnUserStatusChange","OnHeartBeat","OnUserStatusQuery","ConnectToServer","log","Connect","SendLogin","user","psw","message","Request","userLogin","userName","passward","connected","SendMessage","param","response","result","errormsg","Success","console","isLogin","PlayMusic","Music_Login","loadScene","InitPrivateUserList","Show","Error","SendRegister","userRegister","password","Information","SendUnLock","cCharacterId","unLockReq","unLockCharacter","unLockCharacters","push","dispatch","UICharacterSelect_list","SendCharacterDetail","userId","tCharacterId","characterDetail","OnCharacterDetail_UI","Failed","showTips","SendSwitchCharacter","character","tid","switchCharacterReq","OnSwitchCharacter_UI","PlaySound","SFX_Success","SendAttrPromote","attrPromoteType","attrPromote","OnAttrPromoteInfo_UI","SendCombatPowerRanking","combatPowerRanking","OnCombatPowerRanking_UI","SendFollow","isFollow","followReq","OnFollowRes_UI","OnUserStatusChange_UI","SendHeartBeat","heartBeatReq","OnHeartBeat_UI","SendUserStatusQuery","userIds","userStatusQueryReq","OnUserStatusQuery_UI","status"],"mappings":"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","sourcesContent":["import { LogUtil } from \"../Log/LogUtil\";\r\nimport proto from '../../Proto/proto.js';\r\nimport { NetClient } from \"../Network/NetClient\";\r\nimport { MessageBox, MessageBoxType } from \"../UI/Common/MessageBox\";\r\nimport { EventManager } from \"../UI/Common/Event/EventManager\";\r\nimport { EventType } from \"../UI/Common/Event/EventType\";\r\nimport { SocketConst } from \"../Network/SocketConst\";\r\nimport { User } from \"../Models/User\";\r\nimport { director } from \"cc\";\r\nimport { SoundManager } from \"../../Sound/SoundManager\";\r\nimport { SoundDefine } from \"../../Sound/SoundDefine\";\r\nimport { TipsManager } from \"../UI/TipsManager\";\r\nimport { CombatPowerRankingManager } from \"../Managers/CombatPowerRankingManager\";\r\nimport { ChatManager } from \"../Managers/ChatManager\";\r\nconst { NetMessage, NetMessageRequest, UserLoginRequest, Result, UserLoginResponse,UserRegisterRequest, UserRegisterResponse,UnLockRequest,\r\n    UnLockResponse,CharacterDetailRequest, CharacterDetailResponse,SwitchCharacterRequest, SwitchCharacterResponse,\r\n    AttrPromoteRequest, AttrPromoteType, AttrPromoteInfoResponse, CombatPowerRankingRequest, CombatPowerRankingResponse, FollowResponse, FollowRequest,\r\n    UserStatusChangeResponse, HeartBeatRequest, HeartBeatResponse, UserStatusQueryRequest, UserStatusQueryResponse} = proto;\r\n\r\nexport class UserService {\r\n    public static Instance: UserService = new UserService();\r\n\r\n    // private pendingMessage: NetMessage = null as unknown as NetMessage;\r\n\r\n    public Init() {\r\n        let this_ = this;\r\n        //socket连接失败\r\n        // EventManager.Instance.addListener(SocketConst.SOCKET_NOCONNECT, this.SOCKET_NOCONNECT, this)\r\n        // //Socket已经连接上\r\n        // EventManager.Instance.addListener(SocketConst.SOCKET_CONNECT, this.SOCKET_CONNECT, this)\r\n        // //Socket重新连接上\r\n        // EventManager.Instance.addListener(SocketConst.SOCKET_RECONNECT, this.SOCKET_RECONNECT, this)\r\n        // //Socket已关闭\r\n        // EventManager.Instance.addListener(SocketConst.SOCKET_CLOSE, this.SOCKET_CLOSE, this)\r\n        EventManager.Instance.addListener(EventType.OnUserLogin, this.OnUserLogin, this)\r\n        EventManager.Instance.addListener(EventType.OnUserRegister, this.OnUserRegister, this)\r\n        EventManager.Instance.addListener(EventType.OnUnLock, this.OnUnLock, this)\r\n        EventManager.Instance.addListener(EventType.OnCharacterDetail, this.OnCharacterDetail, this)\r\n        EventManager.Instance.addListener(EventType.OnSwitchCharacter, this.OnSwitchCharacter, this)\r\n        EventManager.Instance.addListener(EventType.OnAttrPromoteInfo, this.OnAttrPromoteInfo, this)\r\n        EventManager.Instance.addListener(EventType.OnCombatPowerRanking, this.OnCombatPowerRanking, this)\r\n        EventManager.Instance.addListener(EventType.OnFollowRes, this.OnFollowRes, this)\r\n        EventManager.Instance.addListener(EventType.OnUserStatusChange, this.OnUserStatusChange, this)\r\n        EventManager.Instance.addListener(EventType.OnHeartBeat, this.OnHeartBeat, this)\r\n        EventManager.Instance.addListener(EventType.OnUserStatusQuery, this.OnUserStatusQuery, this)\r\n    }\r\n\r\n    // private SOCKET_NOCONNECT(){\r\n    //     this.OnGameServerDisconnect('SOCKET_NOCONNECT');\r\n    // }\r\n    \r\n    // private SOCKET_CONNECT(){\r\n    //     LogUtil.log('Socket已经连接上')\r\n    //     this.OnGameServerConnect('SOCKET_CONNECT');\r\n    // }\r\n\r\n    // private SOCKET_RECONNECT(){\r\n    //     LogUtil.log('Socket重新连接上')\r\n    //     this.OnGameServerConnect('SOCKET_RECONNECT');\r\n    // }\r\n\r\n    // private SOCKET_CLOSE(){\r\n    //     LogUtil.log('Socket已关闭')\r\n    //     this.OnGameServerConnect('SOCKET_CLOSE');\r\n    // }\r\n\r\n    public ConnectToServer(): void {\r\n        LogUtil.log(\"ConnectToServer() Start \");\r\n        NetClient.Instance.Connect();\r\n    }\r\n\r\n    // public OnGameServerConnect(reason: string) {\r\n    //     LogUtil.log(\"LoadingMesager::OnGameServerConnect : reason:\" + reason, NetClient.Instance.Connected);\r\n    //     if (NetClient.Instance.Connected) {\r\n    //         this.connected = true;\r\n    //         if (this.pendingMessage) {\r\n    //             LogUtil.log('OnGameServerConnect SendMessage：' + this.pendingMessage)\r\n    //             NetClient.Instance.SendMessage(this.pendingMessage);\r\n    //             this.pendingMessage = null as unknown as NetMessage;\r\n    //         }\r\n    //     } else {\r\n    //         if (!this.DisconnectNotify(reason)) {\r\n    //             let errorMsg=\"网络错误，无法连接到服务器！\\n\" + reason;\r\n    //             MessageBox.Show(errorMsg, \"错误\", MessageBoxType.Error);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    // public OnGameServerDisconnect(reason: string): void {\r\n    //     LogUtil.log('OnGameServerDisconnect')\r\n    //     this.DisconnectNotify(reason);\r\n    //     return;\r\n    // }\r\n\r\n    // public DisconnectNotify(reason: string): boolean {\r\n    //     if (this.pendingMessage) {\r\n    //         let errorMsg = \"服务器断开！\\n ERROR:\" + reason;\r\n    //         MessageBox.Show(errorMsg , \"错误\", MessageBoxType.Error);\r\n    //         return true;\r\n    //     }\r\n    //     return false;\r\n    // }\r\n\r\n    /**\r\n     * 请求登录\r\n     * @param user \r\n     * @param psw \r\n     */\r\n    public SendLogin(user: string, psw: string): void {\r\n        LogUtil.log(\"UserLoginRequest::user :\" + user + \" psw:\" + psw);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.userLogin = new UserLoginRequest();\r\n        message.Request.userLogin.userName = user;\r\n        message.Request.userLogin.passward = psw;\r\n\r\n        if (!NetClient.Instance.connected) {\r\n            this.ConnectToServer();\r\n        }\r\n        NetClient.Instance.SendMessage(message);\r\n        // if (NetClient.Instance.connected) {\r\n        //     // this.pendingMessage = null as unknown as NetMessage;\r\n        //     NetClient.Instance.SendMessage(message);\r\n        // }\r\n        // else {\r\n        //     // this.pendingMessage = message;\r\n        //     this.ConnectToServer();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 登录响应\r\n     * @param param \r\n     */\r\n    public OnUserLogin(param: any): void {\r\n        let response = param[0] as UserLoginResponse;\r\n        LogUtil.log(\"OnLogin:{0} [{1}]\", response.result, response.errormsg);\r\n\r\n        if (response.result == Result.Success) {//登陆成功逻辑\r\n            console.log('登陆成功逻辑')\r\n            User.Instance.isLogin=true;\r\n            User.Instance.user=response.user;\r\n            SoundManager.Instance.PlayMusic(SoundDefine.Music_Login);\r\n            director.loadScene('UIMain');\r\n            // director.loadScene('Room');\r\n            ChatManager.Instance.Init();\r\n            ChatManager.Instance.InitPrivateUserList();\r\n\r\n        }\r\n        else\r\n          MessageBox.Show(response.errormsg, \"错误\", MessageBoxType.Error);\r\n    }\r\n\r\n    /**\r\n     * 请求注册\r\n     * @param user \r\n     * @param psw \r\n     */\r\n    public SendRegister(user: string, psw: string): void {\r\n        LogUtil.log(\"UserRegisterRequest::user :\" + user + \" psw:\" + psw);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.userRegister = new UserRegisterRequest();\r\n        message.Request.userRegister.userName = user;\r\n        message.Request.userRegister.password = psw;\r\n\r\n        if (!NetClient.Instance.connected) {\r\n            this.ConnectToServer();\r\n        }\r\n        NetClient.Instance.SendMessage(message);\r\n        \r\n        // if (NetClient.Instance.connected) {\r\n        //     // this.pendingMessage = null as unknown as NetMessage;\r\n        //     NetClient.Instance.SendMessage(message);\r\n        // }\r\n        // else {\r\n        //     // this.pendingMessage = message;\r\n        //     this.ConnectToServer();\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 注册响应\r\n     * @param param \r\n     */\r\n    public OnUserRegister(param: any): void {\r\n        let response = param[0] as UserRegisterResponse;\r\n        LogUtil.log(\"OnUserRegister:{0} [{1}]\", response.result, response.errormsg);\r\n\r\n        if (response.result == Result.Success)\r\n        {\r\n            //登录成功，进入角色选择\r\n            console.log('注册成功')\r\n            MessageBox.Show(response.errormsg, \"注册成功\", MessageBoxType.Information);\r\n        }\r\n        else\r\n            MessageBox.Show(response.errormsg, \"错误\", MessageBoxType.Error);\r\n    }\r\n\r\n    /**\r\n     * 请求解锁\r\n     */\r\n    public SendUnLock(cCharacterId: number): void {\r\n        LogUtil.log(\"UnLockRequest::cCharacterId :\" + cCharacterId);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.unLockReq = new UnLockRequest();\r\n        message.Request.unLockReq.cCharacterId=cCharacterId;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n    /**\r\n     * 解锁响应\r\n     */\r\n    public OnUnLock(param: any): void {\r\n        let response = param[0] as UnLockResponse;\r\n        LogUtil.log(\"OnUnLock:{0} [{1}]\", response.result, response.errormsg);\r\n        if(response.result == Result.Success){ \r\n            MessageBox.Show(response.errormsg, \"提示\", MessageBoxType.Information);\r\n            //更新客户端解锁角色\r\n            if(response.unLockCharacter){\r\n                User.Instance.user.unLockCharacters.push(response.unLockCharacter);\r\n                EventManager.Instance.dispatch(EventType.UICharacterSelect_list); //刷新列表\r\n            }\r\n        }else{\r\n            MessageBox.Show(response.errormsg, \"提示\", MessageBoxType.Error);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 请求英雄详情\r\n     */\r\n    public SendCharacterDetail(userId: number,tCharacterId: number): void {\r\n        LogUtil.log(\"CharacterDetailRequest::userId：\"+userId+\"，tCharacterId :\" + tCharacterId);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.characterDetail = new CharacterDetailRequest();\r\n        message.Request.characterDetail.userId=userId;\r\n        message.Request.characterDetail.tCharacterId=tCharacterId;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 英雄详响应\r\n     */\r\n    public OnCharacterDetail(param: any): void {\r\n        let response = param[0] as CharacterDetailResponse;\r\n        LogUtil.log(\"OnCharacterDetail:{0} [{1}]\", response.result, response.errormsg);\r\n        EventManager.Instance.dispatch(EventType.OnCharacterDetail_UI,response); \r\n        if(response.result == Result.Failed){ \r\n            TipsManager.Instance.showTips(response.errormsg);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * 请求切换英雄\r\n     */\r\n    public SendSwitchCharacter(tCharacterId: number): void {\r\n        if(User.Instance.user.character?.tid==tCharacterId){\r\n            MessageBox.Show(\"已选角色不能切换\", \"提示\", MessageBoxType.Information);\r\n            return;\r\n        }\r\n        LogUtil.log(\"SwitchCharacterRequest::tCharacterId :\" + tCharacterId);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.switchCharacterReq = new SwitchCharacterRequest();\r\n        message.Request.switchCharacterReq.tCharacterId=tCharacterId;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n     /**\r\n     * 切换英雄响应\r\n     */\r\n    public OnSwitchCharacter(param: any): void {\r\n        let response = param[0] as SwitchCharacterResponse;\r\n        LogUtil.log(\"OnSwitchCharacter:{0} [{1}]\", response.result, response.errormsg);\r\n        if(response.result == Result.Success){   //切换成功\r\n            LogUtil.log(\"切换成功\");\r\n            MessageBox.Show(response.errormsg, \"提示\", MessageBoxType.Information);\r\n            User.Instance.user.character=response.character;\r\n            EventManager.Instance.dispatch(EventType.UICharacterSelect_list); \r\n            EventManager.Instance.dispatch(EventType.OnSwitchCharacter_UI); \r\n            SoundManager.Instance.PlaySound(SoundDefine.SFX_Success);\r\n        }else{\r\n            MessageBox.Show(response.errormsg, \"提示\", MessageBoxType.Information);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * 请求提升属性\r\n     */\r\n    public SendAttrPromote(tCharacterId: number, attrPromoteType:AttrPromoteType): void {\r\n        LogUtil.log(\"AttrPromoteRequest::tCharacterId :\" + tCharacterId+\"，attrPromoteType=\"+attrPromoteType);\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.attrPromote = new AttrPromoteRequest();\r\n        message.Request.attrPromote.tCharacterId=tCharacterId;\r\n        message.Request.attrPromote.attrPromoteType=attrPromoteType;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 提升属性响应\r\n     */\r\n    public OnAttrPromoteInfo(param: any): void {\r\n        let response = param[0] as AttrPromoteInfoResponse;\r\n        LogUtil.log(\"OnAttrPromoteInfo:{0} [{1}]\", response.result, response.errormsg);\r\n        if(response.result == Result.Success){   //成功\r\n            LogUtil.log(\"成功\");\r\n            TipsManager.Instance.showTips(response.errormsg);\r\n            EventManager.Instance.dispatch(EventType.OnAttrPromoteInfo_UI,response); \r\n            SoundManager.Instance.PlaySound(SoundDefine.SFX_Success);\r\n        }else{\r\n            TipsManager.Instance.showTips(response.errormsg);\r\n        }\r\n    }\r\n\r\n     /**\r\n     * 请求战力排行\r\n     */\r\n    public SendCombatPowerRanking(): void {\r\n        LogUtil.log(\"CombatPowerRankingRequest\");\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.combatPowerRanking = new CombatPowerRankingRequest();\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 战力排行响应\r\n     */\r\n    public OnCombatPowerRanking(param: any): void {\r\n        let response = param[0] as CombatPowerRankingResponse;\r\n        LogUtil.log(\"CombatPowerRankingResponse\");\r\n        EventManager.Instance.dispatch(EventType.OnCombatPowerRanking_UI,response); \r\n    }\r\n\r\n     /**\r\n     * 请求关注/取消关注\r\n     */\r\n    public SendFollow(userId:number,isFollow:boolean): void {\r\n        LogUtil.log(\"FollowRequest\");\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.followReq = new FollowRequest();\r\n        message.Request.followReq.userId=userId;\r\n        message.Request.followReq.isFollow=isFollow;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 关注/取消关注响应\r\n     */\r\n    public OnFollowRes(param: any): void {\r\n        let response = param[0] as FollowResponse;\r\n        LogUtil.log(\"FollowResponse\");\r\n        if(response.result == Result.Success){   //成功\r\n            LogUtil.log(\"成功\");\r\n            TipsManager.Instance.showTips(response.errormsg);\r\n            EventManager.Instance.dispatch(EventType.OnFollowRes_UI,response); \r\n        }else{\r\n            TipsManager.Instance.showTips(response.errormsg);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 用户状态变更响应\r\n     */\r\n    public OnUserStatusChange(param: any): void {\r\n        let response = param[0] as UserStatusChangeResponse; \r\n        LogUtil.log(\"UserStatusChangeResponse\");\r\n        EventManager.Instance.dispatch(EventType.OnUserStatusChange_UI,response); \r\n    }\r\n    \r\n     /**\r\n     * 请求心跳\r\n     */\r\n    public SendHeartBeat(): void {\r\n        LogUtil.log(\"HeartBeatRequest\");\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.heartBeatReq = new HeartBeatRequest();\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 心跳响应\r\n     */\r\n    public OnHeartBeat(param: any) {\r\n        let response = param[0] as HeartBeatResponse;\r\n        LogUtil.log(\"HeartBeatResponse\");\r\n        EventManager.Instance.dispatch(EventType.OnHeartBeat_UI, response); \r\n    }\r\n\r\n    /**\r\n     * 请求用户在线、离线状态查询 \r\n     */\r\n    public SendUserStatusQuery(userIds:Array<number>): void {\r\n        LogUtil.log(\"SendUserStatusQuery\");\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.userStatusQueryReq = new UserStatusQueryRequest();\r\n        message.Request.userStatusQueryReq.userIds=userIds;\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n    /**\r\n     * 用户在线、离线状态响应\r\n     */\r\n    public OnUserStatusQuery(param: any) {\r\n        let response = param[0] as UserStatusQueryResponse;\r\n        LogUtil.log(\"OnUserStatusQuery\");\r\n        EventManager.Instance.dispatch(EventType.OnUserStatusQuery_UI,response.status); \r\n    }\r\n}"]}