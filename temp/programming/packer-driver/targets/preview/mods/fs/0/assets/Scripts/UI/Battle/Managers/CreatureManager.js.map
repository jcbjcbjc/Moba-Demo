{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/UI/Battle/Managers/CreatureManager.ts"],"names":["CreatureManager","Vec3","HashMap","UIWorldElementManager","CollisionCheckManager","CreatureType","ShapeType","MathUtil","LogicRenderConvert","proto","CharacterClass","Array","Clear","creatureData","creatureMap","data","entityId","creature","get","Instance","RemoveCharacterHpBar","clear","idx","AddCreature","node","undefined","put","AddCharacterHpBar","characterDefine","IsCollision","creatureList","push","RemoveCreature","remove","GetCreature","update","dt","GetCountByClass","characterClass","count","Class","toString","FindUnitsInRange","positionX","positionZ","radius","blowsNum","teamType2","isDirOrder","characterList","length","monsterList","emptyList","IsDeath","isCollision","Shape","circle","Distance3","RenderToLogic_Value","Radius","rect","circleTempVec3","set","CollideCircleAndRectRotateRevise","CollisionTempVec3","Width","Long_","_amend","logicRotation","y","dir","creatureType","Character","Monster","resultList","concat","sort","sortBy","console","log","splice"],"mappings":"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","sourcesContent":["import { HashMap } from \"../../../Utils/HashMap\";\r\nimport { Creature } from \"../Enities/Creature\";\r\nimport { UIWorldElementManager } from \"../UIWorldElementManager\";\r\nimport { Vec3, instantiate, Node } from \"cc\";\r\nimport { BattleManager } from \"./BattleManager\";\r\nimport { TeamType2 } from \"../enums/TeamType2\";\r\nimport { DataManager } from \"../../../Managers/DataManager\";\r\nimport { SpawnRuleDefine } from \"../../../Data/SpawnRuleDefine\";\r\nimport { LoadResUtil } from '../../../Utils/LoadResUtil';\r\nimport { CollisionCheckManager } from \"./CollisionCheckManager\";\r\nimport { CreatureType } from \"../enums/CreatureType\";\r\nimport { ShapeType } from \"../enums/ShapeType\";\r\nimport { MathUtil } from \"../../../Utils/MathUtil\";\r\nimport { LogicRenderConvert } from \"../Utils/LogicRenderConvert\";\r\nimport proto from \"../../../../Proto/proto.js\";\r\nconst { CharacterClass }=proto;\r\n\r\n/**\r\n * 生物管理器\r\n */\r\nexport class CreatureManager{\r\n\r\n    public static Instance:CreatureManager=new CreatureManager(); \r\n\r\n    //key：entityId   value：Creature\r\n    public creatureMap=new HashMap();\r\n    private idx:number=0;\r\n\r\n    public Clear(){\r\n        //移除生物血条节点\r\n        let creatureData = this.creatureMap.data;\r\n        for(let entityId in creatureData){\r\n            let creature = this.creatureMap.get(entityId);\r\n            UIWorldElementManager.Instance.RemoveCharacterHpBar(creature);\r\n        }\r\n\r\n        this.creatureMap.clear();\r\n        this.idx=0;\r\n    }\r\n\r\n    /**\r\n     * 添加生物\r\n     * @param node 模型节点\r\n     * @param creature  生物对象\r\n     * @param idx 唯一标识id\r\n     */\r\n    public AddCreature(node, creature:Creature, idx:number=undefined){\r\n        if(idx){\r\n            this.idx=idx;\r\n        }else{\r\n            this.idx++;\r\n        }\r\n        creature.entityId=this.idx;\r\n        node.entityId=this.idx;\r\n        this.creatureMap.put(this.idx, creature);\r\n        //添加血条\r\n        UIWorldElementManager.Instance.AddCharacterHpBar(node, creature);\r\n        //添加到碰撞管理器\r\n      if(creature.characterDefine.IsCollision){  //带碰撞\r\n          CollisionCheckManager.Instance.creatureList.push(creature);\r\n      } \r\n    }\r\n\r\n    /**\r\n     * 移除生物\r\n     * @param entityId 实体id\r\n     */\r\n    public RemoveCreature(entityId:number){\r\n        this.creatureMap.remove(entityId);\r\n    }\r\n\r\n    /**\r\n     * 获取生物\r\n     * @param entityId 实体id\r\n     */\r\n    public GetCreature(entityId:number) : Creature {\r\n        return this.creatureMap.get(entityId);\r\n    }\r\n\r\n    public update(dt:number){\r\n        let creatureData = this.creatureMap.data;\r\n        for(let entityId in creatureData){\r\n            let creature = this.creatureMap.get(entityId);\r\n            creature.update(dt);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 根据类型查询数量\r\n     * @param characterClass \r\n     */\r\n    public GetCountByClass(characterClass:CharacterClass):number{\r\n        let count:number = 0;\r\n        let creatureData = this.creatureMap.data;\r\n        for(let entityId in creatureData){\r\n          let creature = this.creatureMap.get(entityId) as Creature;\r\n          if(creature.characterDefine.Class.toString() == CharacterClass[characterClass]){  \r\n              count++;\r\n          }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    private characterList=new Array<Creature>();\r\n    private monsterList=new Array<Creature>();    \r\n    private emptyList=new Array<Creature>();\r\n    private circleTempVec3=new Vec3();\r\n\r\n    /**\r\n     * 查询范围内的敌人\r\n     * @param positionX 位置x\r\n     * @param positionZ 位置z\r\n     * @param radius 半径\r\n     * @param blowsNum 个数  小于0所有\r\n     * @param teamType2 队伍类型\r\n     * @param isDirOrder 是否根据距离排序\r\n     */\r\n    public FindUnitsInRange(positionX:number, positionZ:number, radius:number, blowsNum:number, teamType2:TeamType2, isDirOrder:boolean = false):Array<Creature>\r\n    {\r\n        if(this.characterList.length > 0){\r\n            this.characterList=[];\r\n        }\r\n        if(this.monsterList.length > 0){\r\n            this.monsterList=[];\r\n        }\r\n        if(this.emptyList.length > 0){\r\n            this.emptyList=[];\r\n        }\r\n\r\n        let creatureMap = CreatureManager.Instance.creatureMap;\r\n        let creatureData = creatureMap.data;\r\n        for (let entityId in creatureData) \r\n        {\r\n            let creature = creatureMap.get(entityId) as Creature;\r\n            if(creature.IsDeath){  //死亡\r\n                continue;\r\n            }\r\n            if(teamType2==creature.teamType2){  //自己队伍的\r\n                continue;\r\n            }\r\n            let isCollision:boolean=false;  //是否碰撞 \r\n            if(creature.characterDefine.Shape.toString()==ShapeType[ShapeType.circle]){  //生物为圆形\r\n                //两个圆形碰撞检测\r\n                if(creature.Distance3(positionX, positionZ) < LogicRenderConvert.RenderToLogic_Value(creature.characterDefine.Radius) + radius){\r\n                    isCollision=true;\r\n                }\r\n            }else if(creature.characterDefine.Shape.toString()==ShapeType[ShapeType.rect]){  //生物为矩形\r\n                //矩形和圆形碰撞检测\r\n                this.circleTempVec3.set(positionX, 0, positionZ);\r\n                isCollision=MathUtil.CollideCircleAndRectRotateRevise(this.circleTempVec3, radius, creature.CollisionTempVec3, LogicRenderConvert.RenderToLogic_Value(creature.characterDefine.Width), LogicRenderConvert.RenderToLogic_Value(creature.characterDefine.Long_),  creature._amend, 360-creature.logicRotation.y);\r\n            }\r\n            if(isCollision) {  //碰撞\r\n                //计算到检测点的距离\r\n                creature.dir = creature.Distance3(positionX, positionZ);\r\n                \r\n                if(creature.creatureType == CreatureType.Character){\r\n                    this.characterList.push(creature);\r\n                }else if(creature.creatureType == CreatureType.Monster){\r\n                    this.monsterList.push(creature);\r\n                }\r\n            }\r\n        }\r\n        if(blowsNum==0 || (this.characterList.length + this.monsterList.length) == 0) {\r\n            return this.emptyList;\r\n        }else {\r\n            let resultList = this.characterList.concat(this.monsterList);\r\n            if(isDirOrder){\r\n                resultList = resultList.sort(MathUtil.sortBy('dir', true));\r\n                console.log('升序')\r\n                // for(let i=0; i < resultList.length; i++){\r\n                //     console.log(resultList[i].dir)\r\n                // }\r\n            }\r\n            if(blowsNum < 0){\r\n                return resultList;\r\n            }else {\r\n                if(blowsNum >= resultList.length) {\r\n                    return resultList;                \r\n                }else{\r\n                    resultList.splice(blowsNum); \r\n                    return  resultList;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}"]}