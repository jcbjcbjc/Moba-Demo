{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/UI/Battle/Managers/AiManager.ts"],"names":["AiManager","Vec3","proto","MathUtil","LogicRenderConvert","DataManager","CreatureManager","TeamType2","BattleGlobal","CarDirType","BattleManager","CharacterClass","constructor","creature","Owner","PathWay","pathWayFlag","targetLogicVec3List","length","IsDeath","endLogicVec3","dis","Math","floor","GetDistance","logicPosition","x","z","RenderToLogic_Value","offsetDir","PathWayEnd","index","finishPathWayIndex","targetLogicVec3","targetDirZ2","targetDirX2","targetDirZ","targetDirX","newDegree","round","GetAngle","RotateHandle","rockerSpeedVo","Instance","rockerSpeeds","vx","attributes","Speed","vz","y","LogicToRenderPosition","MoveHandle","isFinishPathWay","LogicUpdate","AiExecute","creatureClass","characterDefine","Class","toString","Cart","npcMoveWayArr","npcMoveWayNode","children","i","node","name","teamType2","Blue","indexOf","RenderToLogic_TwoVec3","pathWayTempVec3","getWorldPosition","push","clone","creatureMap","creatureData","data","entityId","get","isGuardCart","Soldier","dir","cart","blueCart","redCart","soldierCardDir","leftTop","valueOf","set","rightTop","left","right","leftbottom","rightbottom","SearchTargetMove","targetCreature","targetTeamType2","Red","minDis"],"mappings":"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","sourcesContent":["import { Creature } from \"../Enities/Creature\";\r\nimport { Vec3 } from \"cc\";\r\nimport proto from \"../../../../Proto/proto.js\";\r\nimport { MathUtil } from \"../../../Utils/MathUtil\";\r\nimport { LogicRenderConvert } from \"../Utils/LogicRenderConvert\";\r\nimport { DataManager } from \"../../../Managers/DataManager\";\r\nimport { CreatureManager } from \"./CreatureManager\";\r\nimport { TeamType2 } from \"../enums/TeamType2\";\r\nimport { BattleGlobal } from \"../Utils/BattleGlobal\";\r\nimport { CarDirType } from \"../enums/CarDirType\";\r\nimport { BattleManager } from \"./BattleManager\";\r\nconst { CharacterClass } = proto;\r\n\r\nexport class AiManager {\r\n\r\n    private Owner: Creature;\r\n    public constructor(creature: Creature) {\r\n        this.Owner = creature;\r\n    }\r\n    private finishPathWayIndex: number = -1;  //完成寻路索引\r\n    public targetLogicVec3List: Array<Vec3> = [];  //目标逻辑位置集合\r\n    public pathWayFlag: boolean = false;  //是否寻路标识\r\n    public isFinishPathWay: boolean = false; //是否完成寻路\r\n    public pathWayTempVec3: Vec3 = new Vec3();   //寻路临时坐标\r\n\r\n    private targetDirZ: number = 0; //寻路目标方向z轴\r\n    private targetDirX: number = 0; //寻路目标方向x轴\r\n    private targetCreature: Creature;  //目标生物  \r\n    private offsetDir: number = 0; //寻路与目标的偏移距离\r\n\r\n    /**\r\n    * 寻路\r\n    */\r\n    private PathWay() {\r\n        //不是寻路状态\r\n        if (!this.pathWayFlag) {\r\n            return;\r\n        }\r\n        if (this.targetLogicVec3List.length < 1) {\r\n            return;\r\n        }\r\n        if(this.Owner.IsDeath){  //死亡\r\n            return;\r\n        }\r\n        //判断目标过近\r\n        let endLogicVec3 = this.targetLogicVec3List[this.targetLogicVec3List.length - 1];\r\n        let dis = Math.floor(MathUtil.GetDistance(this.Owner.logicPosition.x, this.Owner.logicPosition.z, endLogicVec3.x, endLogicVec3.z));\r\n        // console.log('dis='+dis)\r\n        if (dis < LogicRenderConvert.RenderToLogic_Value(0.5 + this.offsetDir)) {\r\n            // console.log('目标距离过近');\r\n            this.PathWayEnd();\r\n            return;\r\n        }\r\n        let index = this.finishPathWayIndex + 1;\r\n        if (index < this.targetLogicVec3List.length) {\r\n            let targetLogicVec3 = this.targetLogicVec3List[index];\r\n            //获取目标方向\r\n            let targetDirZ2 = targetLogicVec3.z < this.Owner.logicPosition.z ? 1 : -1;\r\n            let targetDirX2 = targetLogicVec3.x < this.Owner.logicPosition.x ? 1 : -1;\r\n            if (this.targetDirZ == 0 || this.targetDirX == 0) {\r\n                this.targetDirZ = targetDirZ2;\r\n                this.targetDirX = targetDirX2;\r\n            } else if (this.targetDirZ != targetDirZ2 || this.targetDirX != targetDirX2) {  //目标位置到了\r\n                this.targetDirZ = 0;\r\n                this.targetDirX = 0;\r\n                this.finishPathWayIndex++;\r\n                //   console.log('目标位置到了 index='+index+'，len='+this.targetLogicVec3List.length)\r\n                if (index == this.targetLogicVec3List.length - 1) {\r\n                    this.PathWayEnd();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            //计算夹角\r\n            let newDegree = Math.round(MathUtil.GetAngle(targetLogicVec3.z - this.Owner.logicPosition.z, targetLogicVec3.x - this.Owner.logicPosition.x));\r\n            newDegree = (newDegree < 0 ? newDegree + 360 : newDegree);\r\n            // console.log('degree='+degree+'，newDegree='+newDegree)\r\n\r\n            // this.Owner.logicRotation.y = newDegree;\r\n            // this.Owner.node.parent.setRotationFromEuler(this.Owner.logicRotation.x, newDegree, this.Owner.logicRotation.z);\r\n            this.Owner.RotateHandle(newDegree);\r\n            //向目标移动\r\n            // if(degree==0){  \r\n            let rockerSpeedVo = DataManager.Instance.rockerSpeeds[newDegree];\r\n            // console.log('degree='+degree+'，newDegree='+newDegree)\r\n            let vx = this.Owner.logicPosition.x + (rockerSpeedVo.x * this.Owner.attributes.Speed);\r\n            let vz = this.Owner.logicPosition.z + (rockerSpeedVo.y * this.Owner.attributes.Speed);\r\n            this.Owner.LogicToRenderPosition(vx, this.Owner.logicPosition.y, vz);\r\n            // }\r\n            this.Owner.MoveHandle();\r\n        } else {  //寻路结束\r\n            this.PathWayEnd();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 寻路结束\r\n     */\r\n    private PathWayEnd() {\r\n        this.finishPathWayIndex = -1;\r\n        this.pathWayFlag = false;\r\n        this.targetDirZ = 0;\r\n        this.targetDirX = 0;\r\n        this.isFinishPathWay = true;\r\n    }\r\n\r\n    /**\r\n    * 逻辑更新\r\n    */\r\n    public LogicUpdate() {\r\n        this.PathWay();  //寻路\r\n        this.AiExecute();\r\n    }\r\n\r\n    /**\r\n     * ai执行\r\n     */\r\n    private AiExecute() {\r\n        let creatureClass = this.Owner.characterDefine.Class.toString();\r\n        //移动车\r\n        if (!this.Owner.IsDeath && (creatureClass == CharacterClass[CharacterClass.Cart])) {  //未死亡\r\n            this.offsetDir = 1.2;\r\n            //开始寻路\r\n            if (!this.pathWayFlag && !this.isFinishPathWay) { //未寻路\r\n                this.targetLogicVec3List = [];\r\n                // console.log('npcMoveWayNode='+BattleManager.Instance.npcMoveWayNode)\r\n                let npcMoveWayArr = BattleManager.Instance.npcMoveWayNode.children;\r\n                for (let i = 0; i < npcMoveWayArr.length; i++) {\r\n                    let node = npcMoveWayArr[i];\r\n                    let name = node.name;\r\n                    if (this.Owner.teamType2 == TeamType2.Blue) {  //蓝队\r\n                        if (name.indexOf('Blue') != -1 || name.indexOf('Npc') != -1) {\r\n                            LogicRenderConvert.RenderToLogic_TwoVec3(this.pathWayTempVec3, node.getWorldPosition());\r\n                            this.targetLogicVec3List.push(this.pathWayTempVec3.clone());\r\n                        }\r\n                    } else {  //红队\r\n                        if (name.indexOf('Red') != -1 || name.indexOf('Npc') != -1) {\r\n                            LogicRenderConvert.RenderToLogic_TwoVec3(this.pathWayTempVec3, node.getWorldPosition());\r\n                            this.targetLogicVec3List.push(this.pathWayTempVec3.clone());\r\n                        }\r\n                    }\r\n                }\r\n                this.pathWayFlag = true;\r\n            }\r\n            //判断镖车到达目的地后，守护镖车小兵开始寻路\r\n            if (this.targetLogicVec3List.length < 1) {\r\n                return;\r\n            }\r\n            //判断目标过近\r\n            let endLogicVec3 = this.targetLogicVec3List[this.targetLogicVec3List.length - 1];\r\n            let dis = Math.floor(MathUtil.GetDistance(this.Owner.logicPosition.x, this.Owner.logicPosition.z, endLogicVec3.x, endLogicVec3.z));\r\n            if (dis < LogicRenderConvert.RenderToLogic_Value(4)) {  //镖车距離國近\r\n                //遍历所有生物\r\n                let creatureMap = CreatureManager.Instance.creatureMap;\r\n                let creatureData = creatureMap.data;\r\n                for (let entityId in creatureData) {\r\n                    let creature = creatureMap.get(entityId) as Creature;\r\n                    creature.isGuardCart=false;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n        //小兵逻辑\r\n        if (!this.Owner.IsDeath && creatureClass == CharacterClass[CharacterClass.Soldier]) {\r\n            if (this.Owner.isGuardCart) {  //守护镖车\r\n                if (this.pathWayFlag) {  //寻路中\r\n                    return;\r\n                }\r\n                let dir = this.Owner.teamType2 == TeamType2.Blue ? 1 : -1;\r\n                let cart = this.Owner.teamType2 == TeamType2.Blue ? BattleGlobal.blueCart : BattleGlobal.redCart;\r\n                // console.log('soldierCardDir：'+creature.soldierCardDir+'，=leftTop：'+(creature.soldierCardDir == CarDirType.leftTop.valueOf()))\r\n                if (this.Owner.soldierCardDir == CarDirType.leftTop.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(-2.2)), cart.logicPosition.y, cart.logicPosition.z + (dir * LogicRenderConvert.RenderToLogic_Value(-2.2)));\r\n                    // console.log(creature.logicPosition+'，'+creature.pathWayTempVec3)\r\n                } else if (this.Owner.soldierCardDir == CarDirType.rightTop.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(2.2)), cart.logicPosition.y, cart.logicPosition.z + (dir * LogicRenderConvert.RenderToLogic_Value(-2.2)));\r\n                } else if (this.Owner.soldierCardDir == CarDirType.left.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(-2.2)), cart.logicPosition.y, cart.logicPosition.z);\r\n                } else if (this.Owner.soldierCardDir == CarDirType.right.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(2.2)), cart.logicPosition.y, cart.logicPosition.z);\r\n                } else if (this.Owner.soldierCardDir == CarDirType.leftbottom.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(-2.2)), cart.logicPosition.y, cart.logicPosition.z + (dir * LogicRenderConvert.RenderToLogic_Value(2.2)));\r\n                } else if (this.Owner.soldierCardDir == CarDirType.rightbottom.valueOf()) {\r\n                    this.pathWayTempVec3.set(cart.logicPosition.x + ( LogicRenderConvert.RenderToLogic_Value(2.2)), cart.logicPosition.y, cart.logicPosition.z + (dir * LogicRenderConvert.RenderToLogic_Value(2.2)));\r\n                }\r\n                this.targetLogicVec3List = [this.pathWayTempVec3];\r\n                this.pathWayFlag = true;\r\n            } else {\r\n                this.offsetDir = 2;\r\n                this.SearchTargetMove();\r\n            }\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * 寻找目标并向目标移动\r\n     */\r\n    public SearchTargetMove() {\r\n        if (this.pathWayFlag) {  //寻路中\r\n            return;\r\n        }\r\n        if (this.targetCreature) {  //存在目标生物\r\n            return;\r\n        }\r\n        let targetTeamType2 = this.Owner.teamType2 == TeamType2.Blue ? TeamType2.Red : TeamType2.Blue;  //目标队伍类型\r\n        let minDis: number;  //最小距离\r\n        let targetCreature: Creature;   //目标生物\r\n        //遍历所有生物\r\n        let creatureMap = CreatureManager.Instance.creatureMap;\r\n        let creatureData = creatureMap.data;\r\n        for (let entityId in creatureData) {\r\n            let creature = creatureMap.get(entityId) as Creature;\r\n            if (!creature.IsDeath && creature.teamType2 == targetTeamType2) {  //未死亡是目标队伍类型\r\n                let dis = Math.floor(MathUtil.GetDistance(this.Owner.logicPosition.x, this.Owner.logicPosition.z, creature.logicPosition.x, creature.logicPosition.z));\r\n                if (!minDis || dis < minDis) {\r\n                    targetCreature = creature;\r\n                }\r\n            }\r\n        }\r\n        if (targetCreature) {  //存在目标生物，寻路过去\r\n            this.targetCreature = targetCreature;\r\n            this.targetLogicVec3List = [this.targetCreature.logicPosition];\r\n            this.pathWayFlag = true;\r\n        }\r\n    }\r\n\r\n}"]}