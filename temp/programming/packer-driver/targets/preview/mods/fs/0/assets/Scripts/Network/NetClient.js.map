{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/Network/NetClient.ts"],"names":["NetClient","LogUtil","proto","NetConfig","MessageDispatch","UserService","NetMessage","Init","timer","setInterval","execute","this_","Instance","_socket","executeCount","SendHeartBeat","addEvents","onmessage","onReceiveMessage","onopen","onSocketOpen","onclose","onSocketClose","onerror","onSocketError","log","connected","pendingMessage","SendMessage","reconnect","closeCurrentSocket","event","netMessage","decode","Uint8Array","data","console","JSON","stringify","Dispatch","Response","Connect","WebSocket","websocketUrl","binaryType","setTimeout","message","msg","encode","finish","send","close"],"mappings":"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U,CAAC,YAAU;AACjB7C,YAAAA,SAAS,CAACY,QAAV,CAAmB6B,OAAnB;AACH,WAFS,EAER,IAFQ,CAAV;AAGF;AAED;AACJ;AACA;AACA;;;AACWb,QAAAA,WAAW,CAACkB,OAAD,EAA0B;AACxC,cAAG,CAAC9C,SAAS,CAACY,QAAV,CAAmBc,SAAvB,EAAiC;AAC7B1B,YAAAA,SAAS,CAACY,QAAV,CAAmBe,cAAnB,GAAkCmB,OAAlC;AACA;AACH;;AACD,cAAIC,GAAG,GAACzC,UAAU,CAAC0C,MAAX,CAAkBF,OAAlB,EAA2BG,MAA3B,EAAR,CALwC,CAMxC;;AACAjD,UAAAA,SAAS,CAACY,QAAV,CAAmBC,OAAnB,CAA2BqC,IAA3B,CAAgCH,GAAhC;AACH;AAED;AACJ;AACA;;;AACWjB,QAAAA,kBAAkB,GAAE;AACxB,cAAG9B,SAAS,CAACY,QAAV,CAAmBC,OAAtB,EAA8B;AAC5Bb,YAAAA,SAAS,CAACY,QAAV,CAAmBC,OAAnB,CAA2BsC,KAA3B;AACD;;AACDnD,UAAAA,SAAS,CAACY,QAAV,CAAmBC,OAAnB,GAA4B,IAA5B;AACF;;AArHiB,O,GAyHtB;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;sBApSab,S,cACwB,IAAIA,SAAJ,E","sourcesContent":["import { LogUtil } from \"../Log/LogUtil\";\r\nimport { SocketConst } from \"./SocketConst\";\r\nimport { Socket, director } from \"cc\";\r\nimport proto  from '../../Proto/proto.js';\r\nimport { EventManager } from \"../UI/Common/Event/EventManager\";\r\nimport { NetConfig } from \"./NetConfig\";\r\nimport { MessageDispatch } from \"./MessageDispatch\";\r\nimport { UserService } from \"../Services/UserService\";\r\nimport { MessageBox, MessageBoxType } from \"../UI/Common/MessageBox\";\r\nimport { EventType } from \"../UI/Common/Event/EventType\";\r\nimport { User } from \"../Models/User\";\r\nconst { NetMessage }=proto;\r\n\r\nexport class NetClient{\r\n    public static Instance:NetClient=new NetClient();\r\n\r\n    public _socket:WebSocket=null as unknown as WebSocket;\r\n    public connected:boolean=false;\r\n    public pendingMessage: NetMessage = null as unknown as NetMessage;\r\n    public timer:number=0;\r\n    public executeCount:number=0;\r\n\r\n    public Init(){\r\n        this.timer=setInterval(this.execute, 1000);\r\n    }\r\n    \r\n    public execute(){\r\n        let this_= NetClient.Instance;\r\n        if(!this_._socket){\r\n            return;\r\n        }\r\n        this_.executeCount++;\r\n        if(this_.executeCount % 30 ==0){   //每30秒发送心跳包\r\n            UserService.Instance.SendHeartBeat();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 添加事件监听\r\n     */\r\n    public addEvents() {\r\n        NetClient.Instance._socket.onmessage=NetClient.Instance.onReceiveMessage;\r\n        NetClient.Instance._socket.onopen=NetClient.Instance.onSocketOpen;\r\n        NetClient.Instance._socket.onclose=NetClient.Instance.onSocketClose;\r\n        NetClient.Instance._socket.onerror=NetClient.Instance.onSocketError;\r\n    }\r\n\r\n\r\n    /**\r\n     * 服务器连接成功\r\n     */\r\n    public onSocketOpen():void {\r\n        LogUtil.log(\"NetClient 服务器连接成功\");\r\n        NetClient.Instance.connected=true;\r\n        if(NetClient.Instance.pendingMessage){\r\n            NetClient.Instance.SendMessage(NetClient.Instance.pendingMessage);\r\n        }\r\n        NetClient.Instance.pendingMessage=null;\r\n    }\r\n\r\n    /**\r\n     * 服务器断开连接\r\n     */\r\n    public async onSocketClose() {\r\n        LogUtil.log(\"NetClient 服务器断开连接\");\r\n        NetClient.Instance.connected=false;\r\n        NetClient.Instance.reconnect();\r\n    }\r\n\r\n    /**\r\n     * 服务器连接错误\r\n     */\r\n    public onSocketError():void {\r\n        LogUtil.log(\"NetClient 服务器连接错误\");\r\n        NetClient.Instance.connected=false;\r\n        NetClient.Instance.closeCurrentSocket();\r\n        NetClient.Instance.reconnect();\r\n    }\r\n\r\n    /**\r\n     * 收到服务器消息\r\n     * @param e\r\n     */\r\n    public  onReceiveMessage(event: MessageEvent):void {\r\n        let netMessage=NetMessage.decode(new Uint8Array(event.data));\r\n        console.log('NetClient 收到服务器消息：'+JSON.stringify(netMessage))\r\n       MessageDispatch.Dispatch(netMessage.Response);\r\n    }\r\n\r\n\r\n    /**\r\n     * 开始Socket连接\r\n     */\r\n    public Connect():void {\r\n        NetClient.Instance._socket = new WebSocket(NetConfig.websocketUrl);\r\n        NetClient.Instance._socket.binaryType=  \"arraybuffer\";\r\n        NetClient.Instance.addEvents();\r\n    }\r\n\r\n    /**\r\n     * 重新连接\r\n     */\r\n    public reconnect():void {\r\n       setTimeout(function(){\r\n           NetClient.Instance.Connect();\r\n       },5000)\r\n    }\r\n\r\n    /**\r\n     * 发送消息到服务器\r\n     * @param message\r\n     */\r\n    public SendMessage(message:NetMessage):void {\r\n        if(!NetClient.Instance.connected){\r\n            NetClient.Instance.pendingMessage=message;\r\n            return;\r\n        }\r\n        let msg=NetMessage.encode(message).finish();\r\n        // console.log('NetClient SendMessage message='+JSON.stringify(message),msg)\r\n        NetClient.Instance._socket.send(msg);\r\n    }\r\n\r\n    /**\r\n     * 清理当前的Socket连接\r\n     */\r\n    public closeCurrentSocket(){\r\n       if(NetClient.Instance._socket){ \r\n         NetClient.Instance._socket.close();\r\n       }\r\n       NetClient.Instance._socket =null as unknown as WebSocket;\r\n    }\r\n\r\n}\r\n\r\n// export class NetClient{\r\n//     public static Instance:NetClient=new NetClient();\r\n//     public _needReconnect:boolean = true;\r\n//     public _maxReconnectCount = 2;\r\n\r\n//     public _reconnectCount:number = 0;\r\n//     public _connectFlag:boolean=null as unknown as boolean;\r\n//     public _socket:WebSocket=null as unknown as WebSocket;\r\n//     public _isConnecting:boolean=null as unknown as boolean;\r\n//     public timer:number=0;\r\n//     public executeCount:number=0;\r\n    \r\n\r\n//     public Init(){\r\n//         let this_=NetClient.Instance;\r\n//         clearInterval(this_.timer);\r\n//         this_.timer=setInterval(this_.execute,1000);\r\n//     }\r\n\r\n//     public execute(){\r\n//         let this_= NetClient.Instance;\r\n//         if(!this_._socket){\r\n//             return;\r\n//         }\r\n//         this_.executeCount++;\r\n//         if(this_.executeCount % 30 ==0){   //每30秒发送心跳包\r\n//             UserService.Instance.SendHeartBeat();\r\n//         }\r\n//     }\r\n\r\n//     public get Connected(){\r\n//         LogUtil.log('Connected _isConnecting：'+NetClient.Instance._isConnecting)\r\n//         return NetClient.Instance._isConnecting;\r\n//     }\r\n\r\n//     /**\r\n//      * 添加事件监听\r\n//      */\r\n//     public addEvents() {\r\n//         NetClient.Instance._socket.onmessage=NetClient.Instance.onReceiveMessage;\r\n//         NetClient.Instance._socket.onopen=NetClient.Instance.onSocketOpen;\r\n//         NetClient.Instance._socket.onclose=NetClient.Instance.onSocketClose;\r\n//         NetClient.Instance._socket.onerror=NetClient.Instance.onSocketError;\r\n//     }\r\n\r\n//     /**\r\n//      * 移除事件监听\r\n//      */\r\n//     public removeEvents():void {\r\n\r\n//     }\r\n\r\n//     /**\r\n//      * 服务器连接成功\r\n//      */\r\n//     public onSocketOpen():void {\r\n//         let this_= NetClient.Instance;\r\n//         this_._reconnectCount = 0;\r\n//         this_._isConnecting = true;\r\n//         LogUtil.log('onSocketOpen _isConnecting：'+this_._isConnecting)\r\n\r\n//         if (this_._connectFlag && this_._needReconnect) {\r\n//             EventManager.Instance.dispatch(SocketConst.SOCKET_RECONNECT);\r\n//             LogUtil.log(\"SOCKET_RECONNECT\");\r\n//         } else {\r\n//             EventManager.Instance.dispatch(SocketConst.SOCKET_CONNECT);\r\n//             LogUtil.log(\"SOCKET_CONNECT\");\r\n//         }\r\n//         this_._connectFlag = true;\r\n//         LogUtil.log(\"服务器连接成功\");\r\n//     }\r\n\r\n//     /**\r\n//      * 服务器断开连接\r\n//      */\r\n//     public async onSocketClose() {\r\n//         LogUtil.log(\"服务器断开连接 _needReconnect：\"+NetClient.Instance._needReconnect);\r\n//         NetClient.Instance._isConnecting = false;\r\n//       if(User.Instance.isLogin){  \r\n//         let confirmObj= await MessageBox.Show(\"已掉线请重新登录！\", \"提示\", MessageBoxType.Information,\"确定\",\"取消\"); \r\n//         EventManager.Instance.addListener(EventType.UIMessageBox_OnClickYes,function(){\r\n//             director.loadScene('Loading');\r\n//         },confirmObj); \r\n//       }\r\n//     }\r\n\r\n//     /**\r\n//      * 服务器连接错误\r\n//      */\r\n//     public onSocketError():void {\r\n//         LogUtil.log(\"服务器连接错误\");\r\n//         NetClient.Instance._isConnecting = false;\r\n//         if (NetClient.Instance._needReconnect) {\r\n//             EventManager.Instance.dispatch(SocketConst.SOCKET_START_RECONNECT);\r\n//             NetClient.Instance.reconnect();\r\n//         } else {\r\n//             EventManager.Instance.dispatch(SocketConst.SOCKET_CLOSE);\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 收到服务器消息\r\n//      * @param e\r\n//      */\r\n//     public onReceiveMessage(event: MessageEvent):void {\r\n//         let netMessage=NetMessage.decode(new Uint8Array(event.data));\r\n//         console.log('收到服务器消息：'+JSON.stringify(netMessage))\r\n//         MessageDispatch.Dispatch(netMessage.Response);\r\n//     }\r\n\r\n\r\n//     /**\r\n//      * 开始Socket连接\r\n//      */\r\n//     public Connect():void {\r\n//         NetClient.Instance._socket = new WebSocket(NetConfig.websocketUrl);\r\n//         NetClient.Instance._socket.binaryType=  \"arraybuffer\";\r\n//         NetClient.Instance.addEvents();\r\n//     }\r\n\r\n//     /**\r\n//      * 重新连接\r\n//      */\r\n//     public reconnect():void {\r\n//         NetClient.Instance.closeCurrentSocket();\r\n//         NetClient.Instance._reconnectCount++;\r\n//         LogUtil.log(\"重新连接\"+NetClient.Instance._reconnectCount);\r\n//         if (NetClient.Instance._reconnectCount < NetClient.Instance._maxReconnectCount) {\r\n//             NetClient.Instance.Connect();\r\n//         } else {\r\n//             // NetClient.Instance._reconnectCount = 0;\r\n//             if (NetClient.Instance._connectFlag) {\r\n//                  LogUtil.log(\"SOCKET_CLOSE\");\r\n//                 EventManager.Instance.dispatch(SocketConst.SOCKET_CLOSE);\r\n//             } else {\r\n//                 LogUtil.log(\"SOCKET_NOCONNECT\");\r\n//                 EventManager.Instance.dispatch(SocketConst.SOCKET_NOCONNECT);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * 发送消息到服务器\r\n//      * @param message\r\n//      */\r\n//     public SendMessage(message:NetMessage):void {\r\n//         let msg=NetMessage.encode(message).finish();\r\n//         console.log('SendMessage message='+JSON.stringify(message),msg)\r\n//         NetClient.Instance._socket.send(msg);\r\n//     }\r\n\r\n//     /**\r\n//      * 关闭Socket连接\r\n//      */\r\n//     public close():void {\r\n//         NetClient.Instance._connectFlag = false;\r\n//         NetClient.Instance.closeCurrentSocket();\r\n//     }\r\n\r\n//     /**\r\n//      * 清理当前的Socket连接\r\n//      */\r\n//     public closeCurrentSocket(){\r\n//        if(NetClient.Instance._socket){ \r\n//         NetClient.Instance.removeEvents();\r\n//         NetClient.Instance._socket.close();\r\n//        }\r\n//        NetClient.Instance._socket =null as unknown as WebSocket;\r\n//         NetClient.Instance._isConnecting = false;\r\n//     }\r\n\r\n// }"]}