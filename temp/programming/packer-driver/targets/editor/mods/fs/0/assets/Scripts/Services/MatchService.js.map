{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/Services/MatchService.ts"],"names":["MatchService","director","LogUtil","proto","NetClient","EventManager","EventType","User","SoundManager","SoundDefine","TipsManager","UIManager","LocalStorageUtil","RandomUtil","BattleGlobal","BattleMode","NetMessage","NetMessageRequest","Result","ChatRequest","ChatMessage","ChatChannel","ChatResponse","StartMatchRequest","StartMatchResponse","MatchResponse","Init","Instance","addListener","OnStartMatch","OnMatchResponse","SendStartMatch","log","message","Request","startMatchReq","SendMessage","param","response","result","errormsg","Success","uiMatchWait","show","showTips","Close","RemoveItem","allFrameHandlesKey","battleMode","Battle","room","seed","randomSeed","loadScene","PlayMusic","Music_Select"],"mappings":"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","sourcesContent":["import { LogUtil } from \"../Log/LogUtil\";\r\nimport proto from '../../Proto/proto.js';\r\nimport { NetClient } from \"../Network/NetClient\";\r\nimport { MessageBox, MessageBoxType } from \"../UI/Common/MessageBox\";\r\nimport { EventManager } from \"../UI/Common/Event/EventManager\";\r\nimport { EventType } from \"../UI/Common/Event/EventType\";\r\nimport { SocketConst } from \"../Network/SocketConst\";\r\nimport { User } from \"../Models/User\";\r\nimport { director } from \"cc\";\r\nimport { SoundManager } from \"../../Sound/SoundManager\";\r\nimport { SoundDefine } from \"../../Sound/SoundDefine\";\r\nimport { ItemManager } from \"../Managers/ItemManager\";\r\nimport { ChatManager } from \"../Managers/ChatManager\";\r\nimport { TipsManager } from \"../UI/TipsManager\";\r\nimport { UIManager } from \"../UI/Common/UIManager\";\r\nimport { UIMatchWait } from \"../UI/Match/UIMatchWait\";\r\nimport { LocalStorageUtil } from \"../Utils/LocalStorageUtil\";\r\nimport { RandomUtil } from \"../UI/Battle/Utils/RandomUtil\";\r\nimport { BattleGlobal } from \"../UI/Battle/Utils/BattleGlobal\";\r\nimport { BattleMode } from \"../UI/Battle/enums/BattleMode\";\r\nconst { NetMessage, NetMessageRequest, Result, ChatRequest, ChatMessage, ChatChannel, ChatResponse, StartMatchRequest, StartMatchResponse, MatchResponse } = proto;\r\n\r\nexport class MatchService{\r\n    public static Instance: MatchService = new MatchService();\r\n\r\n    private uiMatchWait:UIMatchWait=null;\r\n    public Init() {\r\n        EventManager.Instance.addListener(EventType.OnStartMatch, this.OnStartMatch, this)\r\n        EventManager.Instance.addListener(EventType.OnMatchResponse, this.OnMatchResponse, this)\r\n    }\r\n\r\n\r\n    /**\r\n     * 开始匹配请求\r\n     */\r\n    public SendStartMatch(): void {\r\n        LogUtil.log(\"SendStartMatch\");\r\n        let message = new NetMessage();\r\n        message.Request = new NetMessageRequest();\r\n        message.Request.startMatchReq = new StartMatchRequest();\r\n        NetClient.Instance.SendMessage(message);\r\n    }\r\n\r\n\r\n    /** \r\n     * 开始匹配响应\r\n     */\r\n    private async OnStartMatch(param: any): void {\r\n        let response = param[0] as StartMatchResponse;\r\n        LogUtil.log(\"OnStartMatch:{0}\", response.result,response.errormsg);\r\n        if (response.result == Result.Success){\r\n            this.uiMatchWait = await UIManager.Instance.show(\"UIMatchWait\") as UIMatchWait;  //打开匹配弹窗\r\n        } else{\r\n           TipsManager.Instance.showTips(response.errormsg);\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 匹配响应\r\n     */\r\n    public OnMatchResponse(param: any){\r\n        let response = param[0] as MatchResponse;\r\n        LogUtil.log(\"OnMatchResponse:{0}\", response.result,response.errormsg);\r\n        TipsManager.Instance.showTips(response.errormsg);\r\n        if(this.uiMatchWait){   //关闭匹配弹窗 \r\n            this.uiMatchWait.Close();       \r\n            this.uiMatchWait=null;\r\n        }\r\n        if (response.result == Result.Success){  //匹配成功\r\n           LocalStorageUtil.RemoveItem(LocalStorageUtil.allFrameHandlesKey);  //清除上一次的帧操作\r\n           BattleGlobal.battleMode = BattleMode.Battle;  //设置为对局模式\r\n        \r\n           User.Instance.room=response.room;\r\n           RandomUtil.seed=response.room.randomSeed;   //设置战斗随机数种子\r\n           director.loadScene('EnterGameLoad');\r\n           SoundManager.Instance.PlayMusic(SoundDefine.Music_Select);\r\n        } \r\n    }\r\n}"]}