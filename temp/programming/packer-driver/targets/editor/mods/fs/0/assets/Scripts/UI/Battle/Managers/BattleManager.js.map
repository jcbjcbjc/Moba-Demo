{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/UI/Battle/Managers/BattleManager.ts"],"names":["_decorator","instantiate","Node","Component","Vec3","Prefab","game","EventManager","proto","OptType","BattleService","NetConfig","EventType","HashMap","DataManager","CreatureManager","TeamType2","GameStatus","CharacterManager","LocalStorageUtil","UIMinimapManager","BattleContext","SpawnMonManager","CollisionCheckManager","BattleGlobal","TargetType","AniState","BattleMode","HandlerFrameResult","UIBattle","UIGameLoadIn","ccclass","property","FrameHandle","FrameHandleResponse","RepairFrameResponse","LiveFrameResponse","BattleManager","None","Clear","setFrameRate","Instance","clear","console","log","start","uiGameLoadIn","setMsg","show","isAddListener","creatureMap","values","length","CreateCharacter","Blue","Red","Init","i","skillTipsPrefabs","node","skillTipsMap","put","name","gameStatus","GameIn","dispatch","OnBattleGameIn","allFrameHandlesStr","GetItem","allFrameHandlesKey","allFrameHandles","data","JSON","parse","map","this_","handleFrameTimer","setInterval","handlerFrameResult","OnHandlerFrame","RepairFrameRequest","StartMonitorFrame","battleMode","Battle","timer","CapturePlayerOpts","frameTime","Live","recordUserTimer","handleFrameId","clearInterval","SendRecordUser","hide","OnLiveFrame","param","response","liveFrames","liveFrame","frame","frameHandles","OnFrameHandle","currentFrameTime","Date","getTime","lastReceiveFrameTime","lastCheckFrameTime","ms","uiBattle","updateFrameTime","frameId","newFrameId","NoFrameData","currentRepairFrame","end","GetEndFrameId","SendRepairFrame","repairWaitFrameCount","startFrameId","frameIds","keys","minFrameId","undefined","parseInt","OnRepairFrame","len","repairFrames","repairFrame","get","executeFrameId","NotRepeatFrame","characterList","character","frameHandle","j","fh","userId","user","id","isMove","aniState","Move","notHandleFrameCount","SetAnim","Idle","opt","Rocker","angle","optValue1","RotateHandle","logicPosition","rockerSpeedVo","rockerSpeeds","teamType2","Math","abs","vx","x","attributes","Speed","vz","z","y","LogicToRenderPosition","Skill","skillId","optValue4","skill","SkillMgr","GetSkill","context","Define","CastTarget","toString","RangeTarget","dirDegree","logicRotation","SelectedRange","positionX","optValue2","positionZ","optValue3","CastSkill","creatureList","creature","LogicUpdate","SetItem","stringify","Success","CameraLookAtCharacter","dt","currentCharacter","yValue","zValue","yAngle","xAngle","zAngle","camera","setRotationFromEuler","parent","getWorldPosition","characterWorldPosition","set","setWorldPosition","camCharDis","distance","worldPosition","SendFrameHandle","update","MyBattleItemNode","renderPosition","isLookAtCharacterFlag","onDestroy","removeAll","recProTimer"],"mappings":"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","sourcesContent":["import { EventManager } from '../../Common/Event/EventManager';\r\nimport proto from '../../../../Proto/Battle/proto.js';\r\nimport { OptType } from './../enums/OptType';\r\nimport { BattleService } from '../../../Services/BattleService';\r\nimport { NetConfig } from '../../../Network/NetConfig';\r\nimport { EventType } from '../../Common/Event/EventType';\r\nimport { LogUtil } from '../../../Log/LogUtil';\r\nimport { HashMap } from '../../../Utils/HashMap';\r\nimport { LoadResUtil } from '../../../Utils/LoadResUtil';\r\nimport { User } from '../../../Models/User';\r\nimport { DataManager } from '../../../Managers/DataManager';\r\nimport { TeamType } from '../../../../Proto/proto';\r\nimport { CreatureManager } from './../Managers/CreatureManager';\r\nimport { TeamType2 } from './../enums/TeamType2';\r\nimport { MathUtil } from '../../../Utils/MathUtil';\r\nimport { _decorator, instantiate, Node, Component, Vec3, AnimationComponent, Prefab, UITransform, game } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nimport { GameStatus } from '../enums/GameStatus';\r\nimport { CharacterManager } from './CharacterManager';\r\nimport { LogicRenderConvert } from '../Utils/LogicRenderConvert';\r\nimport { LocalStorageUtil } from '../../../Utils/LocalStorageUtil';\r\nimport { UIMinimapManager } from '../Minimap/UIMinimapManager';\r\nimport { Creature } from '../Enities/Creature';\r\nimport { BattleContext } from '../Models/BattleContext';\r\nimport { SpawnMonManager } from './SpawnMonManager';\r\nimport { CollisionCheckManager } from './CollisionCheckManager';\r\nimport { BattleGlobal } from '../Utils/BattleGlobal';\r\nimport { SkillTipsType } from '../enums/SkillTipsType';\r\nimport { SkillTipsSize } from '../Vo/SkillTipsSize';\r\nimport { TargetType } from '../enums/TargetType';\r\nimport { AniState } from '../enums/AniState';\r\nimport { BattleMode } from '../enums/BattleMode';\r\nimport { HandlerFrameResult } from '../enums/HandlerFrameResult';\r\nimport { UIBattle } from '../UIBattle';\r\nimport { UIGameLoadIn } from '../UIGameLoadIn';\r\nconst {FrameHandle,FrameHandleResponse,RepairFrameResponse,LiveFrameResponse }  = proto;\r\n\r\n@ccclass('BattleManager')\r\nexport class BattleManager extends Component {\r\n\r\n    public static Instance:BattleManager=null;\r\n\r\n    public frameHandle = new FrameHandle();  //玩家帧操作对象\r\n    public handleFrameId:number=-1;  //已经处理的帧\r\n    public executeFrameId:number=-1;  //已经执行的帧\r\n     //key：帧id  value：玩家操作集合\r\n     public allFrameHandles: HashMap = new HashMap();   //所有的帧操作\r\n     private timer=null;\r\n     private recProTimer=null;\r\n     private handleFrameTimer=null;\r\n     public gameStatus=GameStatus.None;  //游戏状态\r\n     \r\n     private repairWaitFrameCount:number=5*4;  //补帧等待帧数\r\n     private currentRepairFrame:number=0;  //当前执行补帧\r\n     \r\n    //友方、敌方位置,友方=》蓝队  敌方=》红队\r\n    @property([Node])\r\n    public MyTeam=[];\r\n    @property([Node])\r\n    public EnemyTeam=[];\r\n    @property(Node)\r\n    public camera:Node=null;\r\n    @property(Node)\r\n    public spawnMonsterNode:Node=null;   //怪物节点\r\n    @property(Node)\r\n    public npcMoveWayNode:Node=null;   //npc路径节点\r\n    @property([Prefab])\r\n    public skillTipsPrefabs=[];   //技能提示prefab\r\n    @property(Node)\r\n    public MyBattleItemNode:Node=null;  //我的战斗道具存放节点\r\n    @property(Node)\r\n    public AllBattleEffectsNode:Node=null;  //所有战斗特效存放节点\r\n    @property(UIBattle)\r\n    public uiBattle:UIBattle=null;  \r\n\r\n    @property(UIGameLoadIn)\r\n    public uiGameLoadIn:UIGameLoadIn=null;  \r\n\r\n\r\n\r\n    public currentCharacter:Creature=null;  //当前角色\r\n    public camCharDis:number=0;  // 相机到主角的距离\r\n    public newFrameId:number = -1;  //最新帧\r\n    // public isRecProFlag:boolean = true; //是否恢复进度中\r\n    private recordUserTimer=null;\r\n    private liveNotExecuteFrameCount:number = 0;  //直播未执行帧数\r\n    public isLookAtCharacterFlag:boolean = true; //是否跟随主角\r\n    private lastReceiveFrameTime:number = 0; //最后接收帧时间\r\n    private lastCheckFrameTime:number = 0; //最后抽查时间\r\n    public isAddListener:boolean = false; //是否开始监听事件\r\n\r\n    Clear () {\r\n        game.setFrameRate(60);\r\n        CharacterManager.Instance.Clear();\r\n        CreatureManager.Instance.Clear();\r\n        CollisionCheckManager.Instance.Clear();\r\n        BattleGlobal.clear(); //清空对战数据\r\n        console.log('BattleManager Clear')\r\n    }\r\n\r\n   async start(){\r\n       this.uiGameLoadIn.setMsg('游戏拼命加载中...');\r\n       this.uiGameLoadIn.show();\r\n\r\n        BattleManager.Instance=this;\r\n\r\n        this.isAddListener = false;\r\n       this.Clear();\r\n       console.log('BattleManager start creatureMap len：'+CreatureManager.Instance.creatureMap.values().length)\r\n        //创建角色\r\n        await CharacterManager.Instance.CreateCharacter(TeamType2.Blue);  //蓝队\r\n        await CharacterManager.Instance.CreateCharacter(TeamType2.Red);  //红队\r\n        //创建怪物\r\n        await SpawnMonManager.Instance.Init();\r\n        //小地图初始化\r\n        UIMinimapManager.Instance.Init();  \r\n        //初始化技能提示模型\r\n        for(let i=0; i < this.skillTipsPrefabs.length; i++){\r\n            let node = instantiate(this.skillTipsPrefabs[i]) as Node;\r\n            BattleGlobal.skillTipsMap.put(node.name, node);\r\n        } \r\n\r\n        this.gameStatus=GameStatus.GameIn;\r\n        EventManager.Instance.dispatch(EventType.OnBattleGameIn);\r\n\r\n        let allFrameHandlesStr = LocalStorageUtil.GetItem(LocalStorageUtil.allFrameHandlesKey);\r\n        if(allFrameHandlesStr){  //恢复进度\r\n            console.log('恢复进度')\r\n           this.allFrameHandles.data = JSON.parse(allFrameHandlesStr).map || {};\r\n        //    let this_=this;\r\n        //    this.recProTimer=setInterval(async function(){\r\n        //     await this_.IntervalProgressRecovery(this_);\r\n        //   }, 0);  //2\r\n        }\r\n         \r\n        let this_=this;\r\n        this.handleFrameTimer=setInterval(async function(){ \r\n           //处理帧操作\r\n          let handlerFrameResult = await this_.OnHandlerFrame();\r\n          //补帧效验\r\n          this_.RepairFrameRequest(handlerFrameResult);\r\n        }, 0);\r\n\r\n         this.StartMonitorFrame();\r\n    }\r\n\r\n    /**\r\n     * 进度恢复\r\n     */\r\n    // private async IntervalProgressRecovery(this_:this){ \r\n    //     let handlerFrameResult = await this_.OnHandlerFrame(); \r\n    //     if(handlerFrameResult == HandlerFrameResult.NoFrameData){  //处理帧操作，处理结束\r\n    //         console.log('进度恢复完成，handleFrameId='+this_.handleFrameId)\r\n    //         clearInterval(this_.recProTimer);\r\n    //        await this_.StartMonitorFrame();\r\n    //     } \r\n    // }\r\n\r\n    /**\r\n     * 开始监听帧事件\r\n     */\r\n    private StartMonitorFrame(){\r\n        console.log('StartMonitorFrame')\r\n        this.isAddListener = true;\r\n          let this_=this;\r\n        if(BattleGlobal.battleMode == BattleMode.Battle){    //对局模式\r\n          this.timer=setInterval(function(){\r\n              this_.CapturePlayerOpts();\r\n          },NetConfig.frameTime)\r\n        }else if(BattleGlobal.battleMode == BattleMode.Live){  //观看直播模式\r\n          \r\n        }\r\n        //记录用户请求\r\n        this.recordUserTimer=setInterval(function(){\r\n            if(this_.handleFrameId >= 0 ){\r\n                clearInterval(this_.recordUserTimer)\r\n                // this_.isRecProFlag = false;\r\n            }\r\n            BattleService.Instance.SendRecordUser();\r\n        }, 1000)\r\n        this.uiGameLoadIn.hide();\r\n    }\r\n\r\n    /**\r\n     * 直播帧响应\r\n     * @param param \r\n     */\r\n    public OnLiveFrame(param: any){\r\n        // let response = param[0] as LiveFrameResponse;\r\n        let response = param;\r\n        let liveFrames = response.liveFrames;\r\n        for(let i=0; i < liveFrames.length; i++){\r\n            let liveFrame = liveFrames[i];\r\n            this.allFrameHandles.put(liveFrame.frame, liveFrame.frameHandles || []);\r\n        }\r\n        // this.liveNotExecuteFrameCount += liveFrames.length;\r\n    }\r\n\r\n    /**\r\n     * 帧操作响应\r\n     */\r\n    public  OnFrameHandle(param: any) {\r\n        //计算接收两帧之间的时间间隔\r\n        let currentFrameTime:number = new Date().getTime(); \r\n        if(this.lastReceiveFrameTime != 0 && currentFrameTime - this.lastCheckFrameTime > 3000){  //每3秒抽查下\r\n           let ms = currentFrameTime - this.lastReceiveFrameTime;\r\n           this.uiBattle.updateFrameTime(ms);\r\n           this.lastCheckFrameTime = currentFrameTime;\r\n        }\r\n        this.lastReceiveFrameTime = currentFrameTime;\r\n\r\n        \r\n        let response = param;\r\n       \r\n        let frameId=response.frame;\r\n        \r\n        this.newFrameId=frameId;\r\n\r\n        if(this.newFrameId - 50 > this.handleFrameId){\r\n          this.uiGameLoadIn.setMsg('游戏进度恢复中...');\r\n          this.uiGameLoadIn.show();            \r\n        } else{\r\n          this.uiGameLoadIn.hide();            \r\n        }\r\n        \r\n        //已经处理的帧\r\n        if(frameId <= this.handleFrameId){\r\n            return;\r\n        }\r\n        this.allFrameHandles.put(frameId,response.frameHandles || []); //收到帧保存起来\r\n        \r\n    }\r\n\r\n    /**\r\n     * 补帧效验\r\n     * @param handlerFrameResult \r\n     * @return  是否补帧了\r\n     */\r\n    private RepairFrameRequest(handlerFrameResult:HandlerFrameResult):boolean{\r\n        if(handlerFrameResult == HandlerFrameResult.NoFrameData){\r\n            if(this.currentRepairFrame <= 0){\r\n                //补帧请求\r\n                let start=this.handleFrameId+1;\r\n                let end=this.GetEndFrameId(start);\r\n                if(start >= end){\r\n                    return;\r\n                }\r\n                console.log('补帧请求 start='+start+'，'+end+'，handleFrameId='+this.handleFrameId)\r\n                BattleService.Instance.SendRepairFrame(start, end);\r\n                this.currentRepairFrame=this.repairWaitFrameCount;\r\n            }else{\r\n                this.currentRepairFrame--;\r\n            }\r\n            return true;\r\n        }\r\n        this.currentRepairFrame=0;\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * 获取补帧结束帧\r\n     * @param startFrameId 起始帧\r\n     */\r\n    private GetEndFrameId(startFrameId:number):number{\r\n        let frameIds = this.allFrameHandles.keys();\r\n        let minFrameId:number = undefined; //最小帧\r\n        for(let i=0; i < frameIds.length; i++){\r\n            let frameId = parseInt(frameIds[i])-1;\r\n            if(frameId > startFrameId && (!minFrameId || minFrameId > frameId)){\r\n              minFrameId=frameId;\r\n            }\r\n        }\r\n        return minFrameId || startFrameId;\r\n     }\r\n\r\n    /**\r\n     * 补帧响应\r\n     */\r\n    public OnRepairFrame(param: any): void {\r\n        // let response = param[0] as RepairFrameResponse;\r\n        let response = param;\r\n        // console.log(\"OnRepairFrame:{0}\", JSON.stringify(response.repairFrames));\r\n        let len=response.repairFrames.length;\r\n        for(let i=0; i < len; i++){\r\n            let repairFrame=response.repairFrames[i];\r\n            this.allFrameHandles.put(repairFrame.frame, repairFrame.frameHandles || []);\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    /**\r\n     * 处理帧操作\r\n     */\r\n    private async OnHandlerFrame():HandlerFrameResult{\r\n        let frameId=this.handleFrameId+1;\r\n        //获取帧操作集合\r\n        let frameHandles=this.allFrameHandles.get(frameId);\r\n        // console.log(this.allFrameHandles.length+'==='+frameId)\r\n        // console.log('OnHandlerFrame='+frameId+'，'+frameHandles)\r\n        if(!frameHandles){  //无帧数据\r\n            return HandlerFrameResult.NoFrameData;\r\n        }\r\n        if(this.executeFrameId >= frameId){\r\n            console.log('不能重复执行，已经执行的帧：'+this.executeFrameId)\r\n            return HandlerFrameResult.NotRepeatFrame;\r\n        }\r\n        this.executeFrameId = frameId;\r\n        // console.log('frameId='+frameId);\r\n        // console.log('同步英雄')\r\n        //同步英雄\r\n        let characterList = CharacterManager.Instance.characterList;\r\n        for(let i=0; i < characterList.length; i++){  //遍历所有英雄\r\n            let character = characterList[i];\r\n            let frameHandle:FrameHandle = null; \r\n            for(let j=0; j < frameHandles.length; j++){  //遍历所有操作\r\n                let fh=frameHandles[j];\r\n                if(fh.userId == character.user.id){\r\n                    frameHandle = fh;\r\n                    break;\r\n                } \r\n            }\r\n\r\n           let isMove = (character.aniState == AniState.Move); //character.GetAnim(AniState.Move);\r\n        //    console.log('isMove='+isMove)\r\n            // let animationState = character.animationComponent.getState(AniState[AniState.Move]);\r\n            if(!frameHandle){  //用户无操作\r\n                if(character.notHandleFrameCount > 3){\r\n                    // if(animationState.isPlaying){\r\n                    //     console.log('用户id：'+character.user.id+'，停止动画')\r\n                    //     animationState.stop();\r\n                    //     character.animationComponent.play(AniState[AniState.Idle]);\r\n                    // }\r\n                    if(isMove){\r\n                        console.log('用户id：'+character.user.id+'，停止动画')\r\n                        character.SetAnim(AniState.Idle, true);\r\n                    }\r\n                    character.notHandleFrameCount = 0;\r\n                }else{\r\n                    character.notHandleFrameCount++;\r\n                }\r\n            }else{\r\n                character.notHandleFrameCount = 0;\r\n                //摇杆操作\r\n              if(frameHandle.opt == OptType.Rocker){\r\n                //   console.log('摇杆操作')\r\n                let angle = frameHandle.optValue1 || 0;                \r\n                character.RotateHandle(angle);\r\n                    \r\n                    let logicPosition = character.logicPosition;\r\n                    let rockerSpeedVo = DataManager.Instance.rockerSpeeds[character.teamType2==TeamType2.Red ? angle + 180 : Math.abs(angle)];\r\n                    if(!rockerSpeedVo){\r\n                        console.log('rockerSpeedVo不存在!'+frameHandle.opt+'==='+angle +'=='+(character.teamType2==TeamType2.Red ? angle + 180 : Math.abs(angle)))\r\n                        continue;\r\n                    }\r\n                    // console.log('Speed='+character.attributes.Speed)\r\n                    let vx=logicPosition.x+((character.teamType2==TeamType2.Red ? -1 : 1)*rockerSpeedVo.x*character.attributes.Speed);\r\n                    let vz=logicPosition.z+((character.teamType2==TeamType2.Red ? -1 : 1)*rockerSpeedVo.y*character.attributes.Speed);\r\n                    // console.log('forward x:'+forward.x+'，z:'+forward.z+'，speed:'+character.user.character.speedValue)\r\n                    \r\n                    character.LogicToRenderPosition(vx, logicPosition.y, vz);\r\n\r\n                //    if(!animationState.isPlaying){  //非播放状态\r\n                //       animationState.play();\r\n                //    }\r\n                if(!isMove){   //非播放状态\r\n                    console.log('Move 执行='+AniState[AniState.Move])\r\n                    character.SetAnim(AniState.Move, true);\r\n                }\r\n              }else if(frameHandle.opt == OptType.Skill){  //攻击\r\n                console.log('攻击服务器确认')\r\n                let skillId = frameHandle.optValue1;\r\n                let angle = frameHandle.optValue4;\r\n                let skill = character.SkillMgr.GetSkill(skillId);\r\n                let context = new BattleContext(skillId, character);\r\n\r\n                if(skill.Define.CastTarget.toString() != TargetType[TargetType.RangeTarget]){  //非范围目标\r\n                  context.dirDegree = character.teamType2==TeamType2.Blue ? angle + 180 : (angle-180 < 0 ?  angle-180 + 360 : angle-180);\r\n                  console.log('dirDegree='+(context.dirDegree)+'，character angle='+character.logicRotation.y)\r\n                  //角色旋转\r\n                  character.RotateHandle(context.dirDegree);\r\n                }\r\n\r\n                if(skill.Define.CastTarget.toString() == TargetType[TargetType.SelectedRange]){  //选择范围\r\n                   context.positionX = frameHandle.optValue2;\r\n                   context.positionZ = frameHandle.optValue3;\r\n                }\r\n                // else if(skill.Define.CastTarget.toString() == TargetType[TargetType.StraightLine] || \r\n                //          skill.Define.CastTarget.toString() == TargetType[TargetType.Dir] || \r\n                //          skill.Define.CastTarget.toString() == TargetType[TargetType.Sector]){ //直线、方向、扇形\r\n                // }\r\n\r\n                character.CastSkill(context , skill);\r\n              }else{\r\n                // if(animationState.isPlaying){\r\n                //     animationState.stop();\r\n                //     character.animationComponent.play(AniState[AniState.Idle]);\r\n                // }\r\n                if(isMove){\r\n                    console.log('用户id：'+character.user.id+'，停止动画')\r\n                    character.SetAnim(AniState.Idle, true);\r\n                }\r\n              }\r\n            }\r\n        }\r\n        \r\n       // console.log(frameId)\r\n        // 同步生物逻辑\r\n       let creatureList = CreatureManager.Instance.creatureMap.values();\r\n       for(let i=0;i<creatureList.length;i++){\r\n          let creature = creatureList[i] as Creature;\r\n          creature.LogicUpdate(frameId);\r\n       }\r\n       //同步刷怪管理器\r\n       await SpawnMonManager.Instance.LogicUpdate(frameId);\r\n\r\n       this.handleFrameId=frameId;   //更新已经同步的帧\r\n\r\n       //缓存帧数据\r\n        if(frameId % 15 == 0){\r\n            LocalStorageUtil.SetItem(LocalStorageUtil.allFrameHandlesKey, JSON.stringify(this.allFrameHandles)); \r\n        }\r\n        return HandlerFrameResult.Success;\r\n    }\r\n\r\n    private characterWorldPosition:Vec3 = new Vec3();\r\n    /**\r\n     * 相机跟随主角\r\n     */\r\n    public CameraLookAtCharacter(dt:number){\r\n        //摄像机跟随自己\r\n        if(this.currentCharacter){\r\n            let yValue = 8;\r\n            let zValue = 10;\r\n            let yAngle = 0;\r\n            let xAngle = -35;\r\n            let zAngle = 0;\r\n            if(this.currentCharacter.teamType2 == TeamType2.Red){   //红队\r\n                zValue = -zValue;\r\n                yAngle = 180;\r\n                // zAngle = 180;\r\n            }\r\n            //y轴旋转\r\n            this.camera.setRotationFromEuler(xAngle, yAngle, zAngle);\r\n\r\n            this.currentCharacter.node.parent.getWorldPosition(this.characterWorldPosition);\r\n            this.characterWorldPosition.set(this.characterWorldPosition.x, this.characterWorldPosition.y+yValue, this.characterWorldPosition.z+zValue);\r\n            //相机位置=》插值\r\n            // this.camera.setWorldPosition(MathUtil.lerp(this.camera.worldPosition, this.characterWorldPosition, dt * 1000, NetConfig.frameTime));\r\n            this.camera.setWorldPosition(this.characterWorldPosition);\r\n            \r\n            // console.log('scale='+this.camera.scale)\r\n            //相机和主角的距离\r\n            this.camCharDis = Vec3.distance(this.currentCharacter.node.worldPosition, this.camera.worldPosition);\r\n            // console.log('cameraPos='+this.camera.worldPosition+'，cameraRotation='+this.camera.rotation.x+','+this.camera.rotation.y+','\r\n            // +this.camera.rotation.z+','+this.camera.rotation.w)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 采集玩家操作\r\n     */\r\n    public CapturePlayerOpts():void{\r\n         //无操作\r\n         if(this.frameHandle.opt==OptType.None){\r\n            return;\r\n        }\r\n        // LogUtil.log(this.frameHandle);\r\n        //发送操作\r\n        BattleService.Instance.SendFrameHandle(this.frameHandle);\r\n        this.frameHandle.opt=OptType.None;\r\n        this.frameHandle.optValue1=0;\r\n        this.frameHandle.optValue2=0;\r\n        this.frameHandle.optValue3=0;\r\n    }\r\n\r\n    update(dt:number){\r\n      //更新战斗存放道具节点\r\n      if(this.currentCharacter) {\r\n        this.MyBattleItemNode.setWorldPosition(this.currentCharacter.renderPosition);\r\n      }\r\n        CreatureManager.Instance.update(dt);\r\n        \r\n        if(BattleGlobal.battleMode == BattleMode.Battle || this.isLookAtCharacterFlag){    //对局模式\r\n          this.CameraLookAtCharacter();\r\n        }\r\n\r\n        SpawnMonManager.Instance.update(dt);\r\n    }\r\n\r\n    public onDestroy(){\r\n        console.log('BattleManager onDestroy')\r\n        EventManager.Instance.removeAll(this);\r\n        clearInterval(this.timer);\r\n        clearInterval(this.recProTimer);\r\n        clearInterval(this.recordUserTimer);\r\n        clearInterval(this.handleFrameTimer);\r\n        BattleManager.Instance=null;\r\n    }\r\n}"]}