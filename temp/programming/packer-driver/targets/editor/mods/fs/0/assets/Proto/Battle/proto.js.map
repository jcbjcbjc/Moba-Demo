{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Proto/Battle/proto.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Result","valuesById","values","Object","create","NetMessageRequest2","properties","keys","i","length","prototype","userId","frameHandle","percentForward","gameOverReq","repairFrameReq","encode","message","writer","hasOwnProperty","uint32","int32","FrameHandle","fork","ldelim","PercentForward","GameOverRequest","RepairFrameRequest","encodeDelimited","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","error","fromObject","object","TypeError","toObject","options","defaults","toJSON","constructor","toJSONOptions","NetMessageResponse2","frameHandleRes","percentForwardRes","repairFrameRes","liveFrameRes","FrameHandleResponse","PercentForwardResponse","RepairFrameResponse","LiveFrameResponse","opt","optValue1","optValue2","optValue3","optValue4","frameHandles","frame","emptyArray","push","Array","isArray","arrays","j","percent","allUserLoadSucess","bool","Boolean","startFrame","endFrame","repairFrames","RepairFrame","liveFrames","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable block-scoped-var, no-redeclare, no-control-regex, no-prototype-builtins*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n/**\n * Result enum.\n * @exports Result\n * @enum {string}\n * @property {number} Success=0 Success value\n * @property {number} Failed=1 Failed value\n */\n$root.Result = (function() {\n    var valuesById = {}, values = Object.create(valuesById);\n    values[valuesById[0] = \"Success\"] = 0;\n    values[valuesById[1] = \"Failed\"] = 1;\n    return values;\n})();\n\n$root.NetMessageRequest2 = (function() {\n\n    /**\n     * Properties of a NetMessageRequest2.\n     * @exports INetMessageRequest2\n     * @interface INetMessageRequest2\n     * @property {number|null} [userId] NetMessageRequest2 userId\n     * @property {IFrameHandle|null} [frameHandle] NetMessageRequest2 frameHandle\n     * @property {IPercentForward|null} [percentForward] NetMessageRequest2 percentForward\n     * @property {IGameOverRequest|null} [gameOverReq] NetMessageRequest2 gameOverReq\n     * @property {IRepairFrameRequest|null} [repairFrameReq] NetMessageRequest2 repairFrameReq\n     */\n\n    /**\n     * Constructs a new NetMessageRequest2.\n     * @exports NetMessageRequest2\n     * @classdesc Represents a NetMessageRequest2.\n     * @implements INetMessageRequest2\n     * @constructor\n     * @param {INetMessageRequest2=} [properties] Properties to set\n     */\n    function NetMessageRequest2(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NetMessageRequest2 userId.\n     * @member {number} userId\n     * @memberof NetMessageRequest2\n     * @instance\n     */\n    NetMessageRequest2.prototype.userId = 0;\n\n    /**\n     * NetMessageRequest2 frameHandle.\n     * @member {IFrameHandle|null|undefined} frameHandle\n     * @memberof NetMessageRequest2\n     * @instance\n     */\n    NetMessageRequest2.prototype.frameHandle = null;\n\n    /**\n     * NetMessageRequest2 percentForward.\n     * @member {IPercentForward|null|undefined} percentForward\n     * @memberof NetMessageRequest2\n     * @instance\n     */\n    NetMessageRequest2.prototype.percentForward = null;\n\n    /**\n     * NetMessageRequest2 gameOverReq.\n     * @member {IGameOverRequest|null|undefined} gameOverReq\n     * @memberof NetMessageRequest2\n     * @instance\n     */\n    NetMessageRequest2.prototype.gameOverReq = null;\n\n    /**\n     * NetMessageRequest2 repairFrameReq.\n     * @member {IRepairFrameRequest|null|undefined} repairFrameReq\n     * @memberof NetMessageRequest2\n     * @instance\n     */\n    NetMessageRequest2.prototype.repairFrameReq = null;\n\n    /**\n     * Creates a new NetMessageRequest2 instance using the specified properties.\n     * @function create\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {INetMessageRequest2=} [properties] Properties to set\n     * @returns {NetMessageRequest2} NetMessageRequest2 instance\n     */\n    NetMessageRequest2.create = function create(properties) {\n        return new NetMessageRequest2(properties);\n    };\n\n    /**\n     * Encodes the specified NetMessageRequest2 message. Does not implicitly {@link NetMessageRequest2.verify|verify} messages.\n     * @function encode\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {INetMessageRequest2} message NetMessageRequest2 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetMessageRequest2.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);\n        if (message.frameHandle != null && message.hasOwnProperty(\"frameHandle\"))\n            $root.FrameHandle.encode(message.frameHandle, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\"))\n            $root.PercentForward.encode(message.percentForward, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.gameOverReq != null && message.hasOwnProperty(\"gameOverReq\"))\n            $root.GameOverRequest.encode(message.gameOverReq, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.repairFrameReq != null && message.hasOwnProperty(\"repairFrameReq\"))\n            $root.RepairFrameRequest.encode(message.repairFrameReq, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified NetMessageRequest2 message, length delimited. Does not implicitly {@link NetMessageRequest2.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {INetMessageRequest2} message NetMessageRequest2 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetMessageRequest2.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NetMessageRequest2 message from the specified reader or buffer.\n     * @function decode\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {NetMessageRequest2} NetMessageRequest2\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetMessageRequest2.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NetMessageRequest2();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.int32();\n                break;\n            case 2:\n                message.frameHandle = $root.FrameHandle.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.percentForward = $root.PercentForward.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.gameOverReq = $root.GameOverRequest.decode(reader, reader.uint32());\n                break;\n            case 5:\n                message.repairFrameReq = $root.RepairFrameRequest.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a NetMessageRequest2 message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {NetMessageRequest2} NetMessageRequest2\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetMessageRequest2.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NetMessageRequest2 message.\n     * @function verify\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NetMessageRequest2.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isInteger(message.userId))\n                return \"userId: integer expected\";\n        if (message.frameHandle != null && message.hasOwnProperty(\"frameHandle\")) {\n            var error = $root.FrameHandle.verify(message.frameHandle);\n            if (error)\n                return \"frameHandle.\" + error;\n        }\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\")) {\n            var error = $root.PercentForward.verify(message.percentForward);\n            if (error)\n                return \"percentForward.\" + error;\n        }\n        if (message.gameOverReq != null && message.hasOwnProperty(\"gameOverReq\")) {\n            var error = $root.GameOverRequest.verify(message.gameOverReq);\n            if (error)\n                return \"gameOverReq.\" + error;\n        }\n        if (message.repairFrameReq != null && message.hasOwnProperty(\"repairFrameReq\")) {\n            var error = $root.RepairFrameRequest.verify(message.repairFrameReq);\n            if (error)\n                return \"repairFrameReq.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a NetMessageRequest2 message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {NetMessageRequest2} NetMessageRequest2\n     */\n    NetMessageRequest2.fromObject = function fromObject(object) {\n        if (object instanceof $root.NetMessageRequest2)\n            return object;\n        var message = new $root.NetMessageRequest2();\n        if (object.userId != null)\n            message.userId = object.userId | 0;\n        if (object.frameHandle != null) {\n            if (typeof object.frameHandle !== \"object\")\n                throw TypeError(\".NetMessageRequest2.frameHandle: object expected\");\n            message.frameHandle = $root.FrameHandle.fromObject(object.frameHandle);\n        }\n        if (object.percentForward != null) {\n            if (typeof object.percentForward !== \"object\")\n                throw TypeError(\".NetMessageRequest2.percentForward: object expected\");\n            message.percentForward = $root.PercentForward.fromObject(object.percentForward);\n        }\n        if (object.gameOverReq != null) {\n            if (typeof object.gameOverReq !== \"object\")\n                throw TypeError(\".NetMessageRequest2.gameOverReq: object expected\");\n            message.gameOverReq = $root.GameOverRequest.fromObject(object.gameOverReq);\n        }\n        if (object.repairFrameReq != null) {\n            if (typeof object.repairFrameReq !== \"object\")\n                throw TypeError(\".NetMessageRequest2.repairFrameReq: object expected\");\n            message.repairFrameReq = $root.RepairFrameRequest.fromObject(object.repairFrameReq);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a NetMessageRequest2 message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof NetMessageRequest2\n     * @static\n     * @param {NetMessageRequest2} message NetMessageRequest2\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NetMessageRequest2.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = 0;\n            object.frameHandle = null;\n            object.percentForward = null;\n            object.gameOverReq = null;\n            object.repairFrameReq = null;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.frameHandle != null && message.hasOwnProperty(\"frameHandle\"))\n            object.frameHandle = $root.FrameHandle.toObject(message.frameHandle, options);\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\"))\n            object.percentForward = $root.PercentForward.toObject(message.percentForward, options);\n        if (message.gameOverReq != null && message.hasOwnProperty(\"gameOverReq\"))\n            object.gameOverReq = $root.GameOverRequest.toObject(message.gameOverReq, options);\n        if (message.repairFrameReq != null && message.hasOwnProperty(\"repairFrameReq\"))\n            object.repairFrameReq = $root.RepairFrameRequest.toObject(message.repairFrameReq, options);\n        return object;\n    };\n\n    /**\n     * Converts this NetMessageRequest2 to JSON.\n     * @function toJSON\n     * @memberof NetMessageRequest2\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NetMessageRequest2.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return NetMessageRequest2;\n})();\n\n$root.NetMessageResponse2 = (function() {\n\n    /**\n     * Properties of a NetMessageResponse2.\n     * @exports INetMessageResponse2\n     * @interface INetMessageResponse2\n     * @property {IFrameHandleResponse|null} [frameHandleRes] NetMessageResponse2 frameHandleRes\n     * @property {IPercentForwardResponse|null} [percentForwardRes] NetMessageResponse2 percentForwardRes\n     * @property {IRepairFrameResponse|null} [repairFrameRes] NetMessageResponse2 repairFrameRes\n     * @property {ILiveFrameResponse|null} [liveFrameRes] NetMessageResponse2 liveFrameRes\n     */\n\n    /**\n     * Constructs a new NetMessageResponse2.\n     * @exports NetMessageResponse2\n     * @classdesc Represents a NetMessageResponse2.\n     * @implements INetMessageResponse2\n     * @constructor\n     * @param {INetMessageResponse2=} [properties] Properties to set\n     */\n    function NetMessageResponse2(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * NetMessageResponse2 frameHandleRes.\n     * @member {IFrameHandleResponse|null|undefined} frameHandleRes\n     * @memberof NetMessageResponse2\n     * @instance\n     */\n    NetMessageResponse2.prototype.frameHandleRes = null;\n\n    /**\n     * NetMessageResponse2 percentForwardRes.\n     * @member {IPercentForwardResponse|null|undefined} percentForwardRes\n     * @memberof NetMessageResponse2\n     * @instance\n     */\n    NetMessageResponse2.prototype.percentForwardRes = null;\n\n    /**\n     * NetMessageResponse2 repairFrameRes.\n     * @member {IRepairFrameResponse|null|undefined} repairFrameRes\n     * @memberof NetMessageResponse2\n     * @instance\n     */\n    NetMessageResponse2.prototype.repairFrameRes = null;\n\n    /**\n     * NetMessageResponse2 liveFrameRes.\n     * @member {ILiveFrameResponse|null|undefined} liveFrameRes\n     * @memberof NetMessageResponse2\n     * @instance\n     */\n    NetMessageResponse2.prototype.liveFrameRes = null;\n\n    /**\n     * Creates a new NetMessageResponse2 instance using the specified properties.\n     * @function create\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {INetMessageResponse2=} [properties] Properties to set\n     * @returns {NetMessageResponse2} NetMessageResponse2 instance\n     */\n    NetMessageResponse2.create = function create(properties) {\n        return new NetMessageResponse2(properties);\n    };\n\n    /**\n     * Encodes the specified NetMessageResponse2 message. Does not implicitly {@link NetMessageResponse2.verify|verify} messages.\n     * @function encode\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {INetMessageResponse2} message NetMessageResponse2 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetMessageResponse2.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.frameHandleRes != null && message.hasOwnProperty(\"frameHandleRes\"))\n            $root.FrameHandleResponse.encode(message.frameHandleRes, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.percentForwardRes != null && message.hasOwnProperty(\"percentForwardRes\"))\n            $root.PercentForwardResponse.encode(message.percentForwardRes, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.repairFrameRes != null && message.hasOwnProperty(\"repairFrameRes\"))\n            $root.RepairFrameResponse.encode(message.repairFrameRes, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.liveFrameRes != null && message.hasOwnProperty(\"liveFrameRes\"))\n            $root.LiveFrameResponse.encode(message.liveFrameRes, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified NetMessageResponse2 message, length delimited. Does not implicitly {@link NetMessageResponse2.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {INetMessageResponse2} message NetMessageResponse2 message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    NetMessageResponse2.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a NetMessageResponse2 message from the specified reader or buffer.\n     * @function decode\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {NetMessageResponse2} NetMessageResponse2\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetMessageResponse2.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.NetMessageResponse2();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.frameHandleRes = $root.FrameHandleResponse.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.percentForwardRes = $root.PercentForwardResponse.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.repairFrameRes = $root.RepairFrameResponse.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.liveFrameRes = $root.LiveFrameResponse.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a NetMessageResponse2 message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {NetMessageResponse2} NetMessageResponse2\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    NetMessageResponse2.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a NetMessageResponse2 message.\n     * @function verify\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    NetMessageResponse2.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.frameHandleRes != null && message.hasOwnProperty(\"frameHandleRes\")) {\n            var error = $root.FrameHandleResponse.verify(message.frameHandleRes);\n            if (error)\n                return \"frameHandleRes.\" + error;\n        }\n        if (message.percentForwardRes != null && message.hasOwnProperty(\"percentForwardRes\")) {\n            var error = $root.PercentForwardResponse.verify(message.percentForwardRes);\n            if (error)\n                return \"percentForwardRes.\" + error;\n        }\n        if (message.repairFrameRes != null && message.hasOwnProperty(\"repairFrameRes\")) {\n            var error = $root.RepairFrameResponse.verify(message.repairFrameRes);\n            if (error)\n                return \"repairFrameRes.\" + error;\n        }\n        if (message.liveFrameRes != null && message.hasOwnProperty(\"liveFrameRes\")) {\n            var error = $root.LiveFrameResponse.verify(message.liveFrameRes);\n            if (error)\n                return \"liveFrameRes.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a NetMessageResponse2 message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {NetMessageResponse2} NetMessageResponse2\n     */\n    NetMessageResponse2.fromObject = function fromObject(object) {\n        if (object instanceof $root.NetMessageResponse2)\n            return object;\n        var message = new $root.NetMessageResponse2();\n        if (object.frameHandleRes != null) {\n            if (typeof object.frameHandleRes !== \"object\")\n                throw TypeError(\".NetMessageResponse2.frameHandleRes: object expected\");\n            message.frameHandleRes = $root.FrameHandleResponse.fromObject(object.frameHandleRes);\n        }\n        if (object.percentForwardRes != null) {\n            if (typeof object.percentForwardRes !== \"object\")\n                throw TypeError(\".NetMessageResponse2.percentForwardRes: object expected\");\n            message.percentForwardRes = $root.PercentForwardResponse.fromObject(object.percentForwardRes);\n        }\n        if (object.repairFrameRes != null) {\n            if (typeof object.repairFrameRes !== \"object\")\n                throw TypeError(\".NetMessageResponse2.repairFrameRes: object expected\");\n            message.repairFrameRes = $root.RepairFrameResponse.fromObject(object.repairFrameRes);\n        }\n        if (object.liveFrameRes != null) {\n            if (typeof object.liveFrameRes !== \"object\")\n                throw TypeError(\".NetMessageResponse2.liveFrameRes: object expected\");\n            message.liveFrameRes = $root.LiveFrameResponse.fromObject(object.liveFrameRes);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a NetMessageResponse2 message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof NetMessageResponse2\n     * @static\n     * @param {NetMessageResponse2} message NetMessageResponse2\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    NetMessageResponse2.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.frameHandleRes = null;\n            object.percentForwardRes = null;\n            object.repairFrameRes = null;\n            object.liveFrameRes = null;\n        }\n        if (message.frameHandleRes != null && message.hasOwnProperty(\"frameHandleRes\"))\n            object.frameHandleRes = $root.FrameHandleResponse.toObject(message.frameHandleRes, options);\n        if (message.percentForwardRes != null && message.hasOwnProperty(\"percentForwardRes\"))\n            object.percentForwardRes = $root.PercentForwardResponse.toObject(message.percentForwardRes, options);\n        if (message.repairFrameRes != null && message.hasOwnProperty(\"repairFrameRes\"))\n            object.repairFrameRes = $root.RepairFrameResponse.toObject(message.repairFrameRes, options);\n        if (message.liveFrameRes != null && message.hasOwnProperty(\"liveFrameRes\"))\n            object.liveFrameRes = $root.LiveFrameResponse.toObject(message.liveFrameRes, options);\n        return object;\n    };\n\n    /**\n     * Converts this NetMessageResponse2 to JSON.\n     * @function toJSON\n     * @memberof NetMessageResponse2\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    NetMessageResponse2.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return NetMessageResponse2;\n})();\n\n$root.FrameHandle = (function() {\n\n    /**\n     * Properties of a FrameHandle.\n     * @exports IFrameHandle\n     * @interface IFrameHandle\n     * @property {number|null} [userId] FrameHandle userId\n     * @property {number|null} [opt] FrameHandle opt\n     * @property {number|null} [optValue1] FrameHandle optValue1\n     * @property {number|null} [optValue2] FrameHandle optValue2\n     * @property {number|null} [optValue3] FrameHandle optValue3\n     * @property {number|null} [optValue4] FrameHandle optValue4\n     */\n\n    /**\n     * Constructs a new FrameHandle.\n     * @exports FrameHandle\n     * @classdesc Represents a FrameHandle.\n     * @implements IFrameHandle\n     * @constructor\n     * @param {IFrameHandle=} [properties] Properties to set\n     */\n    function FrameHandle(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FrameHandle userId.\n     * @member {number} userId\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.userId = 0;\n\n    /**\n     * FrameHandle opt.\n     * @member {number} opt\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.opt = 0;\n\n    /**\n     * FrameHandle optValue1.\n     * @member {number} optValue1\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.optValue1 = 0;\n\n    /**\n     * FrameHandle optValue2.\n     * @member {number} optValue2\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.optValue2 = 0;\n\n    /**\n     * FrameHandle optValue3.\n     * @member {number} optValue3\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.optValue3 = 0;\n\n    /**\n     * FrameHandle optValue4.\n     * @member {number} optValue4\n     * @memberof FrameHandle\n     * @instance\n     */\n    FrameHandle.prototype.optValue4 = 0;\n\n    /**\n     * Creates a new FrameHandle instance using the specified properties.\n     * @function create\n     * @memberof FrameHandle\n     * @static\n     * @param {IFrameHandle=} [properties] Properties to set\n     * @returns {FrameHandle} FrameHandle instance\n     */\n    FrameHandle.create = function create(properties) {\n        return new FrameHandle(properties);\n    };\n\n    /**\n     * Encodes the specified FrameHandle message. Does not implicitly {@link FrameHandle.verify|verify} messages.\n     * @function encode\n     * @memberof FrameHandle\n     * @static\n     * @param {IFrameHandle} message FrameHandle message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FrameHandle.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);\n        if (message.opt != null && message.hasOwnProperty(\"opt\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.opt);\n        if (message.optValue1 != null && message.hasOwnProperty(\"optValue1\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.optValue1);\n        if (message.optValue2 != null && message.hasOwnProperty(\"optValue2\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.optValue2);\n        if (message.optValue3 != null && message.hasOwnProperty(\"optValue3\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).int32(message.optValue3);\n        if (message.optValue4 != null && message.hasOwnProperty(\"optValue4\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).int32(message.optValue4);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FrameHandle message, length delimited. Does not implicitly {@link FrameHandle.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FrameHandle\n     * @static\n     * @param {IFrameHandle} message FrameHandle message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FrameHandle.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FrameHandle message from the specified reader or buffer.\n     * @function decode\n     * @memberof FrameHandle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FrameHandle} FrameHandle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FrameHandle.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FrameHandle();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.int32();\n                break;\n            case 2:\n                message.opt = reader.int32();\n                break;\n            case 4:\n                message.optValue1 = reader.int32();\n                break;\n            case 5:\n                message.optValue2 = reader.int32();\n                break;\n            case 6:\n                message.optValue3 = reader.int32();\n                break;\n            case 7:\n                message.optValue4 = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FrameHandle message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FrameHandle\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FrameHandle} FrameHandle\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FrameHandle.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FrameHandle message.\n     * @function verify\n     * @memberof FrameHandle\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FrameHandle.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isInteger(message.userId))\n                return \"userId: integer expected\";\n        if (message.opt != null && message.hasOwnProperty(\"opt\"))\n            if (!$util.isInteger(message.opt))\n                return \"opt: integer expected\";\n        if (message.optValue1 != null && message.hasOwnProperty(\"optValue1\"))\n            if (!$util.isInteger(message.optValue1))\n                return \"optValue1: integer expected\";\n        if (message.optValue2 != null && message.hasOwnProperty(\"optValue2\"))\n            if (!$util.isInteger(message.optValue2))\n                return \"optValue2: integer expected\";\n        if (message.optValue3 != null && message.hasOwnProperty(\"optValue3\"))\n            if (!$util.isInteger(message.optValue3))\n                return \"optValue3: integer expected\";\n        if (message.optValue4 != null && message.hasOwnProperty(\"optValue4\"))\n            if (!$util.isInteger(message.optValue4))\n                return \"optValue4: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a FrameHandle message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FrameHandle\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {FrameHandle} FrameHandle\n     */\n    FrameHandle.fromObject = function fromObject(object) {\n        if (object instanceof $root.FrameHandle)\n            return object;\n        var message = new $root.FrameHandle();\n        if (object.userId != null)\n            message.userId = object.userId | 0;\n        if (object.opt != null)\n            message.opt = object.opt | 0;\n        if (object.optValue1 != null)\n            message.optValue1 = object.optValue1 | 0;\n        if (object.optValue2 != null)\n            message.optValue2 = object.optValue2 | 0;\n        if (object.optValue3 != null)\n            message.optValue3 = object.optValue3 | 0;\n        if (object.optValue4 != null)\n            message.optValue4 = object.optValue4 | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a FrameHandle message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FrameHandle\n     * @static\n     * @param {FrameHandle} message FrameHandle\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FrameHandle.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = 0;\n            object.opt = 0;\n            object.optValue1 = 0;\n            object.optValue2 = 0;\n            object.optValue3 = 0;\n            object.optValue4 = 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.opt != null && message.hasOwnProperty(\"opt\"))\n            object.opt = message.opt;\n        if (message.optValue1 != null && message.hasOwnProperty(\"optValue1\"))\n            object.optValue1 = message.optValue1;\n        if (message.optValue2 != null && message.hasOwnProperty(\"optValue2\"))\n            object.optValue2 = message.optValue2;\n        if (message.optValue3 != null && message.hasOwnProperty(\"optValue3\"))\n            object.optValue3 = message.optValue3;\n        if (message.optValue4 != null && message.hasOwnProperty(\"optValue4\"))\n            object.optValue4 = message.optValue4;\n        return object;\n    };\n\n    /**\n     * Converts this FrameHandle to JSON.\n     * @function toJSON\n     * @memberof FrameHandle\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FrameHandle.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FrameHandle;\n})();\n\n$root.FrameHandleResponse = (function() {\n\n    /**\n     * Properties of a FrameHandleResponse.\n     * @exports IFrameHandleResponse\n     * @interface IFrameHandleResponse\n     * @property {number|null} [frame] FrameHandleResponse frame\n     * @property {Array.<IFrameHandle>|null} [frameHandles] FrameHandleResponse frameHandles\n     */\n\n    /**\n     * Constructs a new FrameHandleResponse.\n     * @exports FrameHandleResponse\n     * @classdesc Represents a FrameHandleResponse.\n     * @implements IFrameHandleResponse\n     * @constructor\n     * @param {IFrameHandleResponse=} [properties] Properties to set\n     */\n    function FrameHandleResponse(properties) {\n        this.frameHandles = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FrameHandleResponse frame.\n     * @member {number} frame\n     * @memberof FrameHandleResponse\n     * @instance\n     */\n    FrameHandleResponse.prototype.frame = 0;\n\n    /**\n     * FrameHandleResponse frameHandles.\n     * @member {Array.<IFrameHandle>} frameHandles\n     * @memberof FrameHandleResponse\n     * @instance\n     */\n    FrameHandleResponse.prototype.frameHandles = $util.emptyArray;\n\n    /**\n     * Creates a new FrameHandleResponse instance using the specified properties.\n     * @function create\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {IFrameHandleResponse=} [properties] Properties to set\n     * @returns {FrameHandleResponse} FrameHandleResponse instance\n     */\n    FrameHandleResponse.create = function create(properties) {\n        return new FrameHandleResponse(properties);\n    };\n\n    /**\n     * Encodes the specified FrameHandleResponse message. Does not implicitly {@link FrameHandleResponse.verify|verify} messages.\n     * @function encode\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {IFrameHandleResponse} message FrameHandleResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FrameHandleResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.frame);\n        if (message.frameHandles != null && message.frameHandles.length)\n            for (var i = 0; i < message.frameHandles.length; ++i)\n                $root.FrameHandle.encode(message.frameHandles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FrameHandleResponse message, length delimited. Does not implicitly {@link FrameHandleResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {IFrameHandleResponse} message FrameHandleResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FrameHandleResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FrameHandleResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FrameHandleResponse} FrameHandleResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FrameHandleResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FrameHandleResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.frame = reader.int32();\n                break;\n            case 2:\n                if (!(message.frameHandles && message.frameHandles.length))\n                    message.frameHandles = [];\n                message.frameHandles.push($root.FrameHandle.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FrameHandleResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FrameHandleResponse} FrameHandleResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FrameHandleResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FrameHandleResponse message.\n     * @function verify\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FrameHandleResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            if (!$util.isInteger(message.frame))\n                return \"frame: integer expected\";\n        if (message.frameHandles != null && message.hasOwnProperty(\"frameHandles\")) {\n            if (!Array.isArray(message.frameHandles))\n                return \"frameHandles: array expected\";\n            for (var i = 0; i < message.frameHandles.length; ++i) {\n                var error = $root.FrameHandle.verify(message.frameHandles[i]);\n                if (error)\n                    return \"frameHandles.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a FrameHandleResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {FrameHandleResponse} FrameHandleResponse\n     */\n    FrameHandleResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.FrameHandleResponse)\n            return object;\n        var message = new $root.FrameHandleResponse();\n        if (object.frame != null)\n            message.frame = object.frame | 0;\n        if (object.frameHandles) {\n            if (!Array.isArray(object.frameHandles))\n                throw TypeError(\".FrameHandleResponse.frameHandles: array expected\");\n            message.frameHandles = [];\n            for (var i = 0; i < object.frameHandles.length; ++i) {\n                if (typeof object.frameHandles[i] !== \"object\")\n                    throw TypeError(\".FrameHandleResponse.frameHandles: object expected\");\n                message.frameHandles[i] = $root.FrameHandle.fromObject(object.frameHandles[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a FrameHandleResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FrameHandleResponse\n     * @static\n     * @param {FrameHandleResponse} message FrameHandleResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FrameHandleResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.frameHandles = [];\n        if (options.defaults)\n            object.frame = 0;\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            object.frame = message.frame;\n        if (message.frameHandles && message.frameHandles.length) {\n            object.frameHandles = [];\n            for (var j = 0; j < message.frameHandles.length; ++j)\n                object.frameHandles[j] = $root.FrameHandle.toObject(message.frameHandles[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this FrameHandleResponse to JSON.\n     * @function toJSON\n     * @memberof FrameHandleResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FrameHandleResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FrameHandleResponse;\n})();\n\n$root.PercentForward = (function() {\n\n    /**\n     * Properties of a PercentForward.\n     * @exports IPercentForward\n     * @interface IPercentForward\n     * @property {number|null} [userId] PercentForward userId\n     * @property {number|null} [percent] PercentForward percent\n     */\n\n    /**\n     * Constructs a new PercentForward.\n     * @exports PercentForward\n     * @classdesc Represents a PercentForward.\n     * @implements IPercentForward\n     * @constructor\n     * @param {IPercentForward=} [properties] Properties to set\n     */\n    function PercentForward(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PercentForward userId.\n     * @member {number} userId\n     * @memberof PercentForward\n     * @instance\n     */\n    PercentForward.prototype.userId = 0;\n\n    /**\n     * PercentForward percent.\n     * @member {number} percent\n     * @memberof PercentForward\n     * @instance\n     */\n    PercentForward.prototype.percent = 0;\n\n    /**\n     * Creates a new PercentForward instance using the specified properties.\n     * @function create\n     * @memberof PercentForward\n     * @static\n     * @param {IPercentForward=} [properties] Properties to set\n     * @returns {PercentForward} PercentForward instance\n     */\n    PercentForward.create = function create(properties) {\n        return new PercentForward(properties);\n    };\n\n    /**\n     * Encodes the specified PercentForward message. Does not implicitly {@link PercentForward.verify|verify} messages.\n     * @function encode\n     * @memberof PercentForward\n     * @static\n     * @param {IPercentForward} message PercentForward message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PercentForward.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.userId);\n        if (message.percent != null && message.hasOwnProperty(\"percent\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.percent);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PercentForward message, length delimited. Does not implicitly {@link PercentForward.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PercentForward\n     * @static\n     * @param {IPercentForward} message PercentForward message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PercentForward.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PercentForward message from the specified reader or buffer.\n     * @function decode\n     * @memberof PercentForward\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PercentForward} PercentForward\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PercentForward.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PercentForward();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.userId = reader.int32();\n                break;\n            case 2:\n                message.percent = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PercentForward message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PercentForward\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PercentForward} PercentForward\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PercentForward.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PercentForward message.\n     * @function verify\n     * @memberof PercentForward\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PercentForward.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            if (!$util.isInteger(message.userId))\n                return \"userId: integer expected\";\n        if (message.percent != null && message.hasOwnProperty(\"percent\"))\n            if (!$util.isInteger(message.percent))\n                return \"percent: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a PercentForward message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PercentForward\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PercentForward} PercentForward\n     */\n    PercentForward.fromObject = function fromObject(object) {\n        if (object instanceof $root.PercentForward)\n            return object;\n        var message = new $root.PercentForward();\n        if (object.userId != null)\n            message.userId = object.userId | 0;\n        if (object.percent != null)\n            message.percent = object.percent | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PercentForward message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PercentForward\n     * @static\n     * @param {PercentForward} message PercentForward\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PercentForward.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.userId = 0;\n            object.percent = 0;\n        }\n        if (message.userId != null && message.hasOwnProperty(\"userId\"))\n            object.userId = message.userId;\n        if (message.percent != null && message.hasOwnProperty(\"percent\"))\n            object.percent = message.percent;\n        return object;\n    };\n\n    /**\n     * Converts this PercentForward to JSON.\n     * @function toJSON\n     * @memberof PercentForward\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PercentForward.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PercentForward;\n})();\n\n$root.PercentForwardResponse = (function() {\n\n    /**\n     * Properties of a PercentForwardResponse.\n     * @exports IPercentForwardResponse\n     * @interface IPercentForwardResponse\n     * @property {IPercentForward|null} [percentForward] PercentForwardResponse percentForward\n     * @property {boolean|null} [allUserLoadSucess] PercentForwardResponse allUserLoadSucess\n     */\n\n    /**\n     * Constructs a new PercentForwardResponse.\n     * @exports PercentForwardResponse\n     * @classdesc Represents a PercentForwardResponse.\n     * @implements IPercentForwardResponse\n     * @constructor\n     * @param {IPercentForwardResponse=} [properties] Properties to set\n     */\n    function PercentForwardResponse(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PercentForwardResponse percentForward.\n     * @member {IPercentForward|null|undefined} percentForward\n     * @memberof PercentForwardResponse\n     * @instance\n     */\n    PercentForwardResponse.prototype.percentForward = null;\n\n    /**\n     * PercentForwardResponse allUserLoadSucess.\n     * @member {boolean} allUserLoadSucess\n     * @memberof PercentForwardResponse\n     * @instance\n     */\n    PercentForwardResponse.prototype.allUserLoadSucess = false;\n\n    /**\n     * Creates a new PercentForwardResponse instance using the specified properties.\n     * @function create\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {IPercentForwardResponse=} [properties] Properties to set\n     * @returns {PercentForwardResponse} PercentForwardResponse instance\n     */\n    PercentForwardResponse.create = function create(properties) {\n        return new PercentForwardResponse(properties);\n    };\n\n    /**\n     * Encodes the specified PercentForwardResponse message. Does not implicitly {@link PercentForwardResponse.verify|verify} messages.\n     * @function encode\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {IPercentForwardResponse} message PercentForwardResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PercentForwardResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\"))\n            $root.PercentForward.encode(message.percentForward, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.allUserLoadSucess != null && message.hasOwnProperty(\"allUserLoadSucess\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allUserLoadSucess);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PercentForwardResponse message, length delimited. Does not implicitly {@link PercentForwardResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {IPercentForwardResponse} message PercentForwardResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PercentForwardResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PercentForwardResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PercentForwardResponse} PercentForwardResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PercentForwardResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PercentForwardResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.percentForward = $root.PercentForward.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.allUserLoadSucess = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PercentForwardResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PercentForwardResponse} PercentForwardResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PercentForwardResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PercentForwardResponse message.\n     * @function verify\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PercentForwardResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\")) {\n            var error = $root.PercentForward.verify(message.percentForward);\n            if (error)\n                return \"percentForward.\" + error;\n        }\n        if (message.allUserLoadSucess != null && message.hasOwnProperty(\"allUserLoadSucess\"))\n            if (typeof message.allUserLoadSucess !== \"boolean\")\n                return \"allUserLoadSucess: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a PercentForwardResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PercentForwardResponse} PercentForwardResponse\n     */\n    PercentForwardResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.PercentForwardResponse)\n            return object;\n        var message = new $root.PercentForwardResponse();\n        if (object.percentForward != null) {\n            if (typeof object.percentForward !== \"object\")\n                throw TypeError(\".PercentForwardResponse.percentForward: object expected\");\n            message.percentForward = $root.PercentForward.fromObject(object.percentForward);\n        }\n        if (object.allUserLoadSucess != null)\n            message.allUserLoadSucess = Boolean(object.allUserLoadSucess);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PercentForwardResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PercentForwardResponse\n     * @static\n     * @param {PercentForwardResponse} message PercentForwardResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PercentForwardResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.percentForward = null;\n            object.allUserLoadSucess = false;\n        }\n        if (message.percentForward != null && message.hasOwnProperty(\"percentForward\"))\n            object.percentForward = $root.PercentForward.toObject(message.percentForward, options);\n        if (message.allUserLoadSucess != null && message.hasOwnProperty(\"allUserLoadSucess\"))\n            object.allUserLoadSucess = message.allUserLoadSucess;\n        return object;\n    };\n\n    /**\n     * Converts this PercentForwardResponse to JSON.\n     * @function toJSON\n     * @memberof PercentForwardResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PercentForwardResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PercentForwardResponse;\n})();\n\n$root.GameOverRequest = (function() {\n\n    /**\n     * Properties of a GameOverRequest.\n     * @exports IGameOverRequest\n     * @interface IGameOverRequest\n     */\n\n    /**\n     * Constructs a new GameOverRequest.\n     * @exports GameOverRequest\n     * @classdesc Represents a GameOverRequest.\n     * @implements IGameOverRequest\n     * @constructor\n     * @param {IGameOverRequest=} [properties] Properties to set\n     */\n    function GameOverRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Creates a new GameOverRequest instance using the specified properties.\n     * @function create\n     * @memberof GameOverRequest\n     * @static\n     * @param {IGameOverRequest=} [properties] Properties to set\n     * @returns {GameOverRequest} GameOverRequest instance\n     */\n    GameOverRequest.create = function create(properties) {\n        return new GameOverRequest(properties);\n    };\n\n    /**\n     * Encodes the specified GameOverRequest message. Does not implicitly {@link GameOverRequest.verify|verify} messages.\n     * @function encode\n     * @memberof GameOverRequest\n     * @static\n     * @param {IGameOverRequest} message GameOverRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GameOverRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified GameOverRequest message, length delimited. Does not implicitly {@link GameOverRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof GameOverRequest\n     * @static\n     * @param {IGameOverRequest} message GameOverRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    GameOverRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a GameOverRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof GameOverRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {GameOverRequest} GameOverRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GameOverRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.GameOverRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a GameOverRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof GameOverRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {GameOverRequest} GameOverRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    GameOverRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a GameOverRequest message.\n     * @function verify\n     * @memberof GameOverRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    GameOverRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        return null;\n    };\n\n    /**\n     * Creates a GameOverRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof GameOverRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {GameOverRequest} GameOverRequest\n     */\n    GameOverRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.GameOverRequest)\n            return object;\n        return new $root.GameOverRequest();\n    };\n\n    /**\n     * Creates a plain object from a GameOverRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof GameOverRequest\n     * @static\n     * @param {GameOverRequest} message GameOverRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    GameOverRequest.toObject = function toObject() {\n        return {};\n    };\n\n    /**\n     * Converts this GameOverRequest to JSON.\n     * @function toJSON\n     * @memberof GameOverRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    GameOverRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return GameOverRequest;\n})();\n\n$root.RepairFrameRequest = (function() {\n\n    /**\n     * Properties of a RepairFrameRequest.\n     * @exports IRepairFrameRequest\n     * @interface IRepairFrameRequest\n     * @property {number|null} [startFrame] RepairFrameRequest startFrame\n     * @property {number|null} [endFrame] RepairFrameRequest endFrame\n     */\n\n    /**\n     * Constructs a new RepairFrameRequest.\n     * @exports RepairFrameRequest\n     * @classdesc Represents a RepairFrameRequest.\n     * @implements IRepairFrameRequest\n     * @constructor\n     * @param {IRepairFrameRequest=} [properties] Properties to set\n     */\n    function RepairFrameRequest(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RepairFrameRequest startFrame.\n     * @member {number} startFrame\n     * @memberof RepairFrameRequest\n     * @instance\n     */\n    RepairFrameRequest.prototype.startFrame = 0;\n\n    /**\n     * RepairFrameRequest endFrame.\n     * @member {number} endFrame\n     * @memberof RepairFrameRequest\n     * @instance\n     */\n    RepairFrameRequest.prototype.endFrame = 0;\n\n    /**\n     * Creates a new RepairFrameRequest instance using the specified properties.\n     * @function create\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {IRepairFrameRequest=} [properties] Properties to set\n     * @returns {RepairFrameRequest} RepairFrameRequest instance\n     */\n    RepairFrameRequest.create = function create(properties) {\n        return new RepairFrameRequest(properties);\n    };\n\n    /**\n     * Encodes the specified RepairFrameRequest message. Does not implicitly {@link RepairFrameRequest.verify|verify} messages.\n     * @function encode\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {IRepairFrameRequest} message RepairFrameRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrameRequest.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.startFrame != null && message.hasOwnProperty(\"startFrame\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.startFrame);\n        if (message.endFrame != null && message.hasOwnProperty(\"endFrame\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.endFrame);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RepairFrameRequest message, length delimited. Does not implicitly {@link RepairFrameRequest.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {IRepairFrameRequest} message RepairFrameRequest message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrameRequest.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RepairFrameRequest message from the specified reader or buffer.\n     * @function decode\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RepairFrameRequest} RepairFrameRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrameRequest.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RepairFrameRequest();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.startFrame = reader.int32();\n                break;\n            case 2:\n                message.endFrame = reader.int32();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RepairFrameRequest message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RepairFrameRequest} RepairFrameRequest\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrameRequest.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RepairFrameRequest message.\n     * @function verify\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RepairFrameRequest.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startFrame != null && message.hasOwnProperty(\"startFrame\"))\n            if (!$util.isInteger(message.startFrame))\n                return \"startFrame: integer expected\";\n        if (message.endFrame != null && message.hasOwnProperty(\"endFrame\"))\n            if (!$util.isInteger(message.endFrame))\n                return \"endFrame: integer expected\";\n        return null;\n    };\n\n    /**\n     * Creates a RepairFrameRequest message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RepairFrameRequest} RepairFrameRequest\n     */\n    RepairFrameRequest.fromObject = function fromObject(object) {\n        if (object instanceof $root.RepairFrameRequest)\n            return object;\n        var message = new $root.RepairFrameRequest();\n        if (object.startFrame != null)\n            message.startFrame = object.startFrame | 0;\n        if (object.endFrame != null)\n            message.endFrame = object.endFrame | 0;\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RepairFrameRequest message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RepairFrameRequest\n     * @static\n     * @param {RepairFrameRequest} message RepairFrameRequest\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RepairFrameRequest.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.startFrame = 0;\n            object.endFrame = 0;\n        }\n        if (message.startFrame != null && message.hasOwnProperty(\"startFrame\"))\n            object.startFrame = message.startFrame;\n        if (message.endFrame != null && message.hasOwnProperty(\"endFrame\"))\n            object.endFrame = message.endFrame;\n        return object;\n    };\n\n    /**\n     * Converts this RepairFrameRequest to JSON.\n     * @function toJSON\n     * @memberof RepairFrameRequest\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RepairFrameRequest.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return RepairFrameRequest;\n})();\n\n$root.RepairFrameResponse = (function() {\n\n    /**\n     * Properties of a RepairFrameResponse.\n     * @exports IRepairFrameResponse\n     * @interface IRepairFrameResponse\n     * @property {Array.<IRepairFrame>|null} [repairFrames] RepairFrameResponse repairFrames\n     */\n\n    /**\n     * Constructs a new RepairFrameResponse.\n     * @exports RepairFrameResponse\n     * @classdesc Represents a RepairFrameResponse.\n     * @implements IRepairFrameResponse\n     * @constructor\n     * @param {IRepairFrameResponse=} [properties] Properties to set\n     */\n    function RepairFrameResponse(properties) {\n        this.repairFrames = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RepairFrameResponse repairFrames.\n     * @member {Array.<IRepairFrame>} repairFrames\n     * @memberof RepairFrameResponse\n     * @instance\n     */\n    RepairFrameResponse.prototype.repairFrames = $util.emptyArray;\n\n    /**\n     * Creates a new RepairFrameResponse instance using the specified properties.\n     * @function create\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {IRepairFrameResponse=} [properties] Properties to set\n     * @returns {RepairFrameResponse} RepairFrameResponse instance\n     */\n    RepairFrameResponse.create = function create(properties) {\n        return new RepairFrameResponse(properties);\n    };\n\n    /**\n     * Encodes the specified RepairFrameResponse message. Does not implicitly {@link RepairFrameResponse.verify|verify} messages.\n     * @function encode\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {IRepairFrameResponse} message RepairFrameResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrameResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.repairFrames != null && message.repairFrames.length)\n            for (var i = 0; i < message.repairFrames.length; ++i)\n                $root.RepairFrame.encode(message.repairFrames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RepairFrameResponse message, length delimited. Does not implicitly {@link RepairFrameResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {IRepairFrameResponse} message RepairFrameResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrameResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RepairFrameResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RepairFrameResponse} RepairFrameResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrameResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RepairFrameResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.repairFrames && message.repairFrames.length))\n                    message.repairFrames = [];\n                message.repairFrames.push($root.RepairFrame.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RepairFrameResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RepairFrameResponse} RepairFrameResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrameResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RepairFrameResponse message.\n     * @function verify\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RepairFrameResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.repairFrames != null && message.hasOwnProperty(\"repairFrames\")) {\n            if (!Array.isArray(message.repairFrames))\n                return \"repairFrames: array expected\";\n            for (var i = 0; i < message.repairFrames.length; ++i) {\n                var error = $root.RepairFrame.verify(message.repairFrames[i]);\n                if (error)\n                    return \"repairFrames.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a RepairFrameResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RepairFrameResponse} RepairFrameResponse\n     */\n    RepairFrameResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.RepairFrameResponse)\n            return object;\n        var message = new $root.RepairFrameResponse();\n        if (object.repairFrames) {\n            if (!Array.isArray(object.repairFrames))\n                throw TypeError(\".RepairFrameResponse.repairFrames: array expected\");\n            message.repairFrames = [];\n            for (var i = 0; i < object.repairFrames.length; ++i) {\n                if (typeof object.repairFrames[i] !== \"object\")\n                    throw TypeError(\".RepairFrameResponse.repairFrames: object expected\");\n                message.repairFrames[i] = $root.RepairFrame.fromObject(object.repairFrames[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RepairFrameResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RepairFrameResponse\n     * @static\n     * @param {RepairFrameResponse} message RepairFrameResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RepairFrameResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.repairFrames = [];\n        if (message.repairFrames && message.repairFrames.length) {\n            object.repairFrames = [];\n            for (var j = 0; j < message.repairFrames.length; ++j)\n                object.repairFrames[j] = $root.RepairFrame.toObject(message.repairFrames[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this RepairFrameResponse to JSON.\n     * @function toJSON\n     * @memberof RepairFrameResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RepairFrameResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return RepairFrameResponse;\n})();\n\n$root.RepairFrame = (function() {\n\n    /**\n     * Properties of a RepairFrame.\n     * @exports IRepairFrame\n     * @interface IRepairFrame\n     * @property {number|null} [frame] RepairFrame frame\n     * @property {Array.<IFrameHandle>|null} [frameHandles] RepairFrame frameHandles\n     */\n\n    /**\n     * Constructs a new RepairFrame.\n     * @exports RepairFrame\n     * @classdesc Represents a RepairFrame.\n     * @implements IRepairFrame\n     * @constructor\n     * @param {IRepairFrame=} [properties] Properties to set\n     */\n    function RepairFrame(properties) {\n        this.frameHandles = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * RepairFrame frame.\n     * @member {number} frame\n     * @memberof RepairFrame\n     * @instance\n     */\n    RepairFrame.prototype.frame = 0;\n\n    /**\n     * RepairFrame frameHandles.\n     * @member {Array.<IFrameHandle>} frameHandles\n     * @memberof RepairFrame\n     * @instance\n     */\n    RepairFrame.prototype.frameHandles = $util.emptyArray;\n\n    /**\n     * Creates a new RepairFrame instance using the specified properties.\n     * @function create\n     * @memberof RepairFrame\n     * @static\n     * @param {IRepairFrame=} [properties] Properties to set\n     * @returns {RepairFrame} RepairFrame instance\n     */\n    RepairFrame.create = function create(properties) {\n        return new RepairFrame(properties);\n    };\n\n    /**\n     * Encodes the specified RepairFrame message. Does not implicitly {@link RepairFrame.verify|verify} messages.\n     * @function encode\n     * @memberof RepairFrame\n     * @static\n     * @param {IRepairFrame} message RepairFrame message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrame.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.frame);\n        if (message.frameHandles != null && message.frameHandles.length)\n            for (var i = 0; i < message.frameHandles.length; ++i)\n                $root.FrameHandle.encode(message.frameHandles[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified RepairFrame message, length delimited. Does not implicitly {@link RepairFrame.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof RepairFrame\n     * @static\n     * @param {IRepairFrame} message RepairFrame message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    RepairFrame.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a RepairFrame message from the specified reader or buffer.\n     * @function decode\n     * @memberof RepairFrame\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {RepairFrame} RepairFrame\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrame.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.RepairFrame();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.frame = reader.int32();\n                break;\n            case 2:\n                if (!(message.frameHandles && message.frameHandles.length))\n                    message.frameHandles = [];\n                message.frameHandles.push($root.FrameHandle.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a RepairFrame message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof RepairFrame\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {RepairFrame} RepairFrame\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    RepairFrame.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a RepairFrame message.\n     * @function verify\n     * @memberof RepairFrame\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    RepairFrame.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            if (!$util.isInteger(message.frame))\n                return \"frame: integer expected\";\n        if (message.frameHandles != null && message.hasOwnProperty(\"frameHandles\")) {\n            if (!Array.isArray(message.frameHandles))\n                return \"frameHandles: array expected\";\n            for (var i = 0; i < message.frameHandles.length; ++i) {\n                var error = $root.FrameHandle.verify(message.frameHandles[i]);\n                if (error)\n                    return \"frameHandles.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a RepairFrame message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof RepairFrame\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {RepairFrame} RepairFrame\n     */\n    RepairFrame.fromObject = function fromObject(object) {\n        if (object instanceof $root.RepairFrame)\n            return object;\n        var message = new $root.RepairFrame();\n        if (object.frame != null)\n            message.frame = object.frame | 0;\n        if (object.frameHandles) {\n            if (!Array.isArray(object.frameHandles))\n                throw TypeError(\".RepairFrame.frameHandles: array expected\");\n            message.frameHandles = [];\n            for (var i = 0; i < object.frameHandles.length; ++i) {\n                if (typeof object.frameHandles[i] !== \"object\")\n                    throw TypeError(\".RepairFrame.frameHandles: object expected\");\n                message.frameHandles[i] = $root.FrameHandle.fromObject(object.frameHandles[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a RepairFrame message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof RepairFrame\n     * @static\n     * @param {RepairFrame} message RepairFrame\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    RepairFrame.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.frameHandles = [];\n        if (options.defaults)\n            object.frame = 0;\n        if (message.frame != null && message.hasOwnProperty(\"frame\"))\n            object.frame = message.frame;\n        if (message.frameHandles && message.frameHandles.length) {\n            object.frameHandles = [];\n            for (var j = 0; j < message.frameHandles.length; ++j)\n                object.frameHandles[j] = $root.FrameHandle.toObject(message.frameHandles[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this RepairFrame to JSON.\n     * @function toJSON\n     * @memberof RepairFrame\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    RepairFrame.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return RepairFrame;\n})();\n\n$root.LiveFrameResponse = (function() {\n\n    /**\n     * Properties of a LiveFrameResponse.\n     * @exports ILiveFrameResponse\n     * @interface ILiveFrameResponse\n     * @property {Array.<IRepairFrame>|null} [liveFrames] LiveFrameResponse liveFrames\n     */\n\n    /**\n     * Constructs a new LiveFrameResponse.\n     * @exports LiveFrameResponse\n     * @classdesc Represents a LiveFrameResponse.\n     * @implements ILiveFrameResponse\n     * @constructor\n     * @param {ILiveFrameResponse=} [properties] Properties to set\n     */\n    function LiveFrameResponse(properties) {\n        this.liveFrames = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * LiveFrameResponse liveFrames.\n     * @member {Array.<IRepairFrame>} liveFrames\n     * @memberof LiveFrameResponse\n     * @instance\n     */\n    LiveFrameResponse.prototype.liveFrames = $util.emptyArray;\n\n    /**\n     * Creates a new LiveFrameResponse instance using the specified properties.\n     * @function create\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {ILiveFrameResponse=} [properties] Properties to set\n     * @returns {LiveFrameResponse} LiveFrameResponse instance\n     */\n    LiveFrameResponse.create = function create(properties) {\n        return new LiveFrameResponse(properties);\n    };\n\n    /**\n     * Encodes the specified LiveFrameResponse message. Does not implicitly {@link LiveFrameResponse.verify|verify} messages.\n     * @function encode\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {ILiveFrameResponse} message LiveFrameResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LiveFrameResponse.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.liveFrames != null && message.liveFrames.length)\n            for (var i = 0; i < message.liveFrames.length; ++i)\n                $root.RepairFrame.encode(message.liveFrames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified LiveFrameResponse message, length delimited. Does not implicitly {@link LiveFrameResponse.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {ILiveFrameResponse} message LiveFrameResponse message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    LiveFrameResponse.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a LiveFrameResponse message from the specified reader or buffer.\n     * @function decode\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {LiveFrameResponse} LiveFrameResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LiveFrameResponse.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.LiveFrameResponse();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.liveFrames && message.liveFrames.length))\n                    message.liveFrames = [];\n                message.liveFrames.push($root.RepairFrame.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a LiveFrameResponse message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {LiveFrameResponse} LiveFrameResponse\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    LiveFrameResponse.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a LiveFrameResponse message.\n     * @function verify\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    LiveFrameResponse.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.liveFrames != null && message.hasOwnProperty(\"liveFrames\")) {\n            if (!Array.isArray(message.liveFrames))\n                return \"liveFrames: array expected\";\n            for (var i = 0; i < message.liveFrames.length; ++i) {\n                var error = $root.RepairFrame.verify(message.liveFrames[i]);\n                if (error)\n                    return \"liveFrames.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a LiveFrameResponse message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {LiveFrameResponse} LiveFrameResponse\n     */\n    LiveFrameResponse.fromObject = function fromObject(object) {\n        if (object instanceof $root.LiveFrameResponse)\n            return object;\n        var message = new $root.LiveFrameResponse();\n        if (object.liveFrames) {\n            if (!Array.isArray(object.liveFrames))\n                throw TypeError(\".LiveFrameResponse.liveFrames: array expected\");\n            message.liveFrames = [];\n            for (var i = 0; i < object.liveFrames.length; ++i) {\n                if (typeof object.liveFrames[i] !== \"object\")\n                    throw TypeError(\".LiveFrameResponse.liveFrames: object expected\");\n                message.liveFrames[i] = $root.RepairFrame.fromObject(object.liveFrames[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a LiveFrameResponse message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof LiveFrameResponse\n     * @static\n     * @param {LiveFrameResponse} message LiveFrameResponse\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    LiveFrameResponse.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.liveFrames = [];\n        if (message.liveFrames && message.liveFrames.length) {\n            object.liveFrames = [];\n            for (var j = 0; j < message.liveFrames.length; ++j)\n                object.liveFrames[j] = $root.RepairFrame.toObject(message.liveFrames[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this LiveFrameResponse to JSON.\n     * @function toJSON\n     * @memberof LiveFrameResponse\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    LiveFrameResponse.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return LiveFrameResponse;\n})();\n\nmodule.exports = $root;\n"]}