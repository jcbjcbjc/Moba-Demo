{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/Utils/GlobalPool.ts"],"names":["AutoNodePool","GlobalPool","NodePool","instantiate","constructor","prefab","scriptName","scripteName","pool","get","data","item","s","getComponent","init","console","log","name","put","clear","createPool","nodeName","allPools","warn","error","node","js","unuse","destroy","putAllChildren","i","children","length","child","key"],"mappings":"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","sourcesContent":["import { Prefab, NodePool, instantiate, Node } from \"cc\";\n\nexport interface IPoolObject {\n    /**\n     * 对象池中创建新的实例时，将调用此函数初始化实例\n     */\n    init: (data?: any) => void;\n    /**\n     * 对象池中已经存在的实例重新取出使用时，将调用此函数\n     */\n    reuse: (data?: any) => void;\n    /**\n     * 节点放回对象池时将调用的函数\n     */\n    unuse: () => void;\n}\n\n/**节点对象池，对象池为空时可自动实例化新的对象 */\nexport class AutoNodePool {\n    private prefab: Prefab|Node;\n    private scripteName: string;\n    private pool: NodePool;\n    /**\n     * 节点对象池，对象池为空时可自动实例化新的对象\n     * @param prefab 预制\n     * @param scriptName 节点挂载的脚本，管理节点进出对象池时的逻辑，必须实现接口IPoolObject\n     */\n    constructor(prefab: Prefab|Node, scriptName?: string) {\n        this.prefab = prefab;\n        this.scripteName = scriptName;\n        this.pool = new NodePool(scriptName);\n    }\n\n    /**\n     * 获取实例\n     * @param data 给实例赋值的数据\n     */\n    public get(data?: any): Node {\n        let item: Node = this.pool.get(data);\n        if (!item) {\n            item = instantiate(this.prefab) as Node;\n            if (!!this.scripteName) {\n                let s = item.getComponent(this.scripteName) as unknown as IPoolObject;\n                if (!!s) {\n                    s.init(data);\n                } else {\n                    this.scripteName = null;\n                }\n            }\n        }else{\n            console.log('对象池中取到对象名称：'+item.name)\n        }\n        return item;\n    }\n\n    /**\n     * 回收节点\n     * @param item\n     */\n    public put(item: Node) {\n        this.pool.put(item);\n    }\n\n    /**\n     * 清空对象池，将销毁所有缓存的实例\n     */\n    public clear() {\n        this.pool.clear();\n    }\n}\n\n/**全局节点对象池 */\nexport default class GlobalPool {\n    private static allPools: { [nodeName: string]: AutoNodePool } = {};\n    /**\n     * 创建新的对象池\n     * @param nodeName 节点名称\n     * @param prefab 节点预制资源\n     * @param scriptName 节点上挂载的脚本名称，必须实现接口IPoolObject，用于处理节点进出对象池时的逻辑\n     */\n    public static createPool(nodeName: string, prefab: Prefab|Node, scriptName?: string): void {\n        if (!!this.allPools[nodeName]) {\n            console.warn(\"已存在该名称的对象池，请确认是否名字冲突：\", nodeName);\n            return;\n        }\n        this.allPools[nodeName] = new AutoNodePool(prefab, scriptName);\n    }\n    /**\n     * 获取实例\n     * @param nodeName 要获取的节点名称\n     * @param data 节点需要的数据\n     * @returns {Node} 按传入的数据进行设置的节点实例\n     */\n    public static get(nodeName: string, data?: any): Node {\n        if (!this.allPools[nodeName]) {\n            console.error(\"未创建对应名称的对象池，获取实例失败：\", nodeName);\n            return null;\n        }\n        return this.allPools[nodeName].get(data);\n    }\n    /**\n     * 回收节点\n     * @param node 回收的节点\n     * @param nodeName 节点名称，与节点要放回的对象池名称对应\n     */\n    public static put(node: Node, nodeName?: string) {\n        if (!nodeName) nodeName = node.name;\n        if (!this.allPools[nodeName]) {\n            console.warn(\"未创建对应名称的对象池，将销毁节点：\", nodeName);\n            let js = node.getComponent(nodeName) as any;\n            if (!!js && !!js.unuse) {\n                js.unuse();\n            }\n            node.destroy();\n            return;\n        }\n        this.allPools[nodeName].put(node);\n    }\n    /**\n     * 回收节点的所有子节点\n     * @param node \n     */\n    public static putAllChildren(node: Node) {\n        for (let i = node.children.length - 1; i >= 0; --i) {\n            let child = node.children[i];\n            this.put(child);\n        }\n    }\n    /**\n     * 清空对象池缓存，未指定名称时将清空所有的对象池\n     * @param nodeName 对象池名称\n     */\n    public static clear(nodeName?: string) {\n        if (!!nodeName) {\n            if (!!this.allPools[nodeName]) {\n                this.allPools[nodeName].clear();\n                delete this.allPools[nodeName];\n            }\n        } else {\n            for (let key in this.allPools) {\n                this.allPools[key].clear();\n            }\n            this.allPools = {};\n        }\n    }\n}"]}