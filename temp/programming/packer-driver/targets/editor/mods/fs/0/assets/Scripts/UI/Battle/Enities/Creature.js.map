{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/UI/Battle/Enities/Creature.ts"],"names":["Creature","Vec3","animation","LogicRenderConvert","MathUtil","NetConfig","SkillManager","BuffManager","SkillResult","BattleState","EffectManager","proto","BattleManager","UIWorldElementManager","CollisionCheckManager","AiManager","Attributes","EffectType","FXManager","EntityEffectManager","AniState","PopupType","NUser","TeamType","constructor","teamType2","node","define","user","creatureType","birthPosition","birthRotation","attributes","InitBasicAttributes","characterDefine","EntityEffectMgr","getComponent","animationController","AnimationController","parent","setWorldPosition","getWorldPosition","renderPosition","RenderToLogic_TwoVec3","logicPosition","getRotation","getEulerAngles","logicRotation","setRotationFromEuler","set","x","y","z","SkillMgr","BuffMgr","EffectMgr","AiMgr","CollisionTempVec3","collisionTempVec3","LogicToRenderPosition","logicX","logicY","logicZ","LogicToRender_TwoVec3","update","dt","nodeCurrentPosition","lerp","frameTime","CastSkill","context","skill","Result","Cast","Ok","InBattle","DoDamage","damage","source","HP","Damage","DoDeath","WillDead","OnDamage","Instance","ShowPopupText","Crit","isBuff","LogicUpdate","frameId","Distance","target","dis","Math","floor","GetDistance","Distance2","position","Distance3","positionX","positionZ","AddBuf","buffDefine","SetAnim","Death","IsDeath","deathFrameId","executeFrameId","RemoveCharacterHpBar","MoveHandle","CollisionCheck","RotateHandle","angle","GetPopupOffset","Height","GetHitOffset","PlayEffect","type","name","duration","console","log","Position","Hit","PlayEffect2","PlayEffectBulletRealCheck","bullet","aniState","value","setValue","Move","Idle"],"mappings":"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","sourcesContent":["import { TeamType2 } from \"../enums/TeamType2\";\r\nimport { Node, Vec3, lerp, AnimationComponent, animation } from \"cc\";\r\nimport { LogicRenderConvert } from \"../Utils/LogicRenderConvert\";\r\nimport { MathUtil } from \"../../../Utils/MathUtil\";\r\nimport { NetConfig } from \"../../../Network/NetConfig\";\r\nimport { UIHpBar } from \"../UIHpBar\";\r\nimport { SkillManager } from \"../Managers/SkillManager\";\r\nimport { BattleContext } from \"../Models/BattleContext\";\r\nimport { BuffDefine } from \"../../../Data/BuffDefine\";\r\nimport { BuffManager } from \"../Managers/BuffManager\";\r\nimport { CharacterDefine } from \"../../../Data/CharacterDefine\";\r\nimport { DataManager } from \"../../../Managers/DataManager\";\r\nimport { DamageInfo } from \"../Vo/DamageInfo\";\r\nimport { SkillResult } from \"../enums/SkillResult\";\r\nimport { BattleState } from \"../enums/BattleState\";\r\nimport { EffectManager } from \"../Managers/EffectManager\";\r\nimport proto from \"../../../../Proto/proto.js\";\r\nimport { CreatureType } from \"../enums/CreatureType\";\r\nimport { BattleManager } from \"../Managers/BattleManager\";\r\nimport { SpawnRuleDefine } from \"../../../Data/SpawnRuleDefine\";\r\nimport { UIWorldElementManager } from \"../UIWorldElementManager\";\r\nimport { CollisionCheckManager } from \"../Managers/CollisionCheckManager\";\r\nimport { AiManager } from \"../Managers/AiManager\";\r\nimport { Skill } from \"../Models/Skill\";\r\nimport { Attributes } from \"../Attribute/Attributes\";\r\nimport { EffectType } from \"../Effects/EffectType\";\r\nimport { FXManager } from \"../Effects/FXManager\";\r\nimport { EntityEffectManager } from \"../Effects/EntityEffectManager\";\r\nimport { AnimationEventController } from \"../Effects/AnimationEventController\";\r\nimport { AniState } from \"../enums/AniState\";\r\nimport { Bullet } from \"../Models/Bullet\";\r\nimport { PopupType } from \"../enums/PopupType\";\r\nconst { NUser, TeamType } = proto;\r\n\r\nexport class Creature {\r\n\r\n    public entityId: number;  //实体id\r\n    public characterDefine: CharacterDefine;  //角色配置\r\n    public spawnRuleDefine: SpawnRuleDefine;  //刷怪配置 \r\n    public teamType2: TeamType2; //队伍类型\r\n    public node: Node;  //节点对象\r\n    public logicPosition: Vec3 = new Vec3();   //逻辑位置\r\n    public renderPosition: Vec3 = new Vec3();   //渲染位置\r\n    public SkillMgr: SkillManager;\r\n    public BuffMgr: BuffManager;\r\n    public BattleState: BattleState;\r\n    public EffectMgr: EffectManager;\r\n    public IsDeath: boolean = false;  //是否死亡\r\n    public deathFrameId: number = 0; //死亡逻辑帧数\r\n    public birthPosition: Vec3 = new Vec3();  //出生位置\r\n    public birthRotation: Vec3 = new Vec3();  //出生方向\r\n    public logicRotation: Vec3 = new Vec3();   //逻辑方向\r\n    public creatureType: CreatureType;   //生物类型\r\n    public hpBarNode: Node;  //血条节点\r\n    public _amend:Vec3 = new Vec3();  //修正值 \r\n    private collisionTempVec3:Vec3 = new Vec3();  //碰撞临时坐标\r\n    public aniState:AniState;  //动画状态\r\n\r\n    /** 组件 */\r\n    // public animationComponent: AnimationComponent; //动画组件\r\n    public EntityEffectMgr:EntityEffectManager;  // 特效管理器组件\r\n    public animationController: animation.AnimationController;  //动画控制器\r\n    /**角色属性 */\r\n    public user: NUser = null;\r\n    public notHandleFrameCount: number = 0;  //无操作帧数\r\n    public attributes=new Attributes();\r\n    /**怪物属性 */\r\n    public isGuardCart:boolean=false;  //是否守护镖车\r\n    public soldierCardDir:number=0;  //守护镖车有效，小兵在镖车的方向\r\n    public AiMgr: AiManager;  //ai管理器\r\n    public dir:number=0;  //距离\r\n\r\n    constructor(teamType2: TeamType2, node: Node, define: CharacterDefine, user: NUser, creatureType: CreatureType, birthPosition: Vec3 = null, birthRotation: Vec3 = null) {\r\n        //初始化基础属性\r\n        this.attributes.InitBasicAttributes(define, user, creatureType);\r\n\r\n        this.user = user;\r\n        this.creatureType = creatureType;\r\n        this.teamType2 = teamType2;\r\n        this.node = node;\r\n        this.characterDefine = define;\r\n        // this.animationComponent = node.getComponent(AnimationComponent);\r\n        this.EntityEffectMgr = node.getComponent(EntityEffectManager);\r\n        this.animationController = node.getComponent(animation.AnimationController);\r\n\r\n        //出生位置\r\n        if (birthPosition) {\r\n            this.birthPosition = birthPosition;\r\n            this.node.parent.setWorldPosition(birthPosition);\r\n        } else {\r\n            this.node.parent.getWorldPosition(this.birthPosition);\r\n        }\r\n        //初始化逻辑位置、方向\r\n        node.parent.getWorldPosition(this.renderPosition);\r\n        LogicRenderConvert.RenderToLogic_TwoVec3(this.logicPosition, this.renderPosition);\r\n\r\n        node.parent.getRotation().getEulerAngles(this.logicRotation);\r\n        //出生方向\r\n        if (birthRotation) {\r\n            this.birthRotation = birthRotation;\r\n            node.parent.setRotationFromEuler(birthRotation);\r\n        } else {\r\n            this.birthRotation.set(this.logicRotation.x, this.logicRotation.y, this.logicRotation.z);\r\n        }\r\n\r\n        this.SkillMgr = new SkillManager(this);\r\n        this.BuffMgr = new BuffManager(this);\r\n        this.EffectMgr = new EffectManager(this);\r\n\r\n        this.AiMgr = new AiManager(this);\r\n    }\r\n  \r\n    /**\r\n     * 获取碰撞临时坐标，避免值改变影响原坐标\r\n     */\r\n    public get CollisionTempVec3():Vec3{\r\n        this.collisionTempVec3.set(this.logicPosition.x, this.logicPosition.y, this.logicPosition.z);\r\n        return this.collisionTempVec3;\r\n    }\r\n\r\n    /**\r\n     * 逻辑转渲染位置\r\n     */\r\n    public LogicToRenderPosition(logicX: number, logicY: number, logicZ: number) {\r\n        this.logicPosition.set(logicX, logicY, logicZ);\r\n        LogicRenderConvert.LogicToRender_TwoVec3(this.logicPosition, this.renderPosition)\r\n        // this.node.parent.setWorldPosition(this.renderPosition);\r\n        // console.log('logicPosition='+this.logicPosition+'，renderPosition='+this.renderPosition)\r\n    }\r\n\r\n\r\n    private nodeCurrentPosition = new Vec3();\r\n    public update(dt: number) {\r\n        // console.log('dt='+dt)\r\n        //插值位置\r\n        if (this.node.parent) {\r\n            this.node.parent.getWorldPosition(this.nodeCurrentPosition);\r\n            this.node.parent.setWorldPosition(MathUtil.lerp(this.nodeCurrentPosition, this.renderPosition, dt * 1000, NetConfig.frameTime));\r\n        }\r\n    }\r\n\r\n    public CastSkill(context: BattleContext, skill: Skill) {\r\n        context.Result = skill.Cast(context);\r\n        if (context.Result == SkillResult.Ok) {\r\n            this.BattleState = BattleState.InBattle;\r\n        }\r\n    }\r\n\r\n    public DoDamage(damage: DamageInfo, source: Creature) {\r\n        this.BattleState = BattleState.InBattle;\r\n        this.attributes.HP -= damage.Damage;\r\n        if (this.attributes.HP < 0) {\r\n            this.DoDeath();\r\n            damage.WillDead = true;\r\n        }\r\n        this.OnDamage(damage, source);\r\n        \r\n        UIWorldElementManager.Instance.ShowPopupText(PopupType.Damage, this, -damage.Damage, damage.Crit, damage.isBuff);\r\n    }\r\n\r\n    public OnDamage(damage: DamageInfo, source: Creature) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 逻辑更新\r\n     */\r\n    public LogicUpdate(frameId: number) {\r\n        this.SkillMgr.LogicUpdate(frameId);\r\n        this.BuffMgr.LogicUpdate();\r\n        this.AiMgr.LogicUpdate();\r\n    }\r\n\r\n    public Distance(target: Creature): number {\r\n        let dis = Math.floor(MathUtil.GetDistance(this.logicPosition.x, this.logicPosition.z, target.logicPosition.x, target.logicPosition.z));\r\n        return dis;\r\n    }\r\n\r\n    public Distance2(position: Vec3): number {\r\n        let dis = Math.floor(MathUtil.GetDistance(this.logicPosition.x, this.logicPosition.z, position.x, position.z));\r\n        return dis;\r\n    }\r\n\r\n    public Distance3(positionX:number, positionZ:number): number {\r\n        let dis = Math.floor(MathUtil.GetDistance(this.logicPosition.x, this.logicPosition.z, positionX, positionZ));\r\n        return dis;\r\n    }\r\n\r\n    public AddBuf(context: BattleContext, buffDefine: BuffDefine) {\r\n        this.BuffMgr.AddBuf(context, buffDefine);\r\n    }\r\n\r\n    /**\r\n     * 死亡\r\n     */\r\n    public DoDeath() {\r\n        this.SetAnim(AniState.Death, true);\r\n        this.IsDeath = true;\r\n        this.deathFrameId = BattleManager.Instance.executeFrameId;\r\n        UIWorldElementManager.Instance.RemoveCharacterHpBar(this);\r\n    }\r\n\r\n    /**\r\n     * 移动处理\r\n     */\r\n    public MoveHandle(){\r\n        CollisionCheckManager.Instance.CollisionCheck(this);\r\n    }\r\n\r\n    /**\r\n     * 旋转处理\r\n     * @param angle 角度\r\n     */\r\n    public RotateHandle(angle:number){\r\n        // if(!this.node.parent){\r\n        //    console.log('RotateHandle: character id='+this.characterDefine.ID+'，node id='+this.node.uuid+'，teamType2='+this.teamType2)\r\n        // }\r\n        //更新方向逻辑\r\n        this.logicRotation.y=angle;\r\n        //更新方向渲染\r\n        this.node.parent.setRotationFromEuler(0, angle, 0);\r\n    }\r\n\r\n    public  GetPopupOffset():Vec3\r\n    {\r\n        return new Vec3(0, this.characterDefine.Height, 0);\r\n    }\r\n\r\n    public GetHitOffset():Vec3\r\n    {\r\n      return new Vec3(0, this.characterDefine.Height * 0.8, 0);\r\n    }\r\n    \r\n    public PlayEffect(type:EffectType, name:string, target:Creature,  duration:number = 0)\r\n    {\r\n        console.log('EntityEffectMgr='+this.EntityEffectMgr+'，type='+type+'，name='+name+\r\n        '，height='+target.GetHitOffset()+'，duration='+duration)\r\n\r\n        if(type==EffectType.Position || type == EffectType.Hit)\r\n        {\r\n            FXManager.Instance.PlayEffect(type, name, target.node, target.GetHitOffset(), duration);\r\n        }\r\n        else\r\n        {\r\n           this.EntityEffectMgr.PlayEffect2(type, name, target.node, target.GetHitOffset(), duration);\r\n        }\r\n    }\r\n\r\n    public PlayEffect2(type:EffectType,  name:string,  position:Vec3,  duration:number = 0)\r\n    {\r\n        if (type == EffectType.Position || type == EffectType.Hit)\r\n            FXManager.Instance.PlayEffect(type, name, null, position, duration);\r\n        else\r\n            this.EntityEffectMgr.PlayEffect2(type, name, null, position, duration);\r\n    }\r\n\r\n    public PlayEffectBulletRealCheck(type:EffectType, name:string, bullet:Bullet)\r\n    {\r\n        this.EntityEffectMgr.PlayEffectBulletRealCheck(type, name, bullet);\r\n    }\r\n\r\n    /**\r\n     * 设置动画状态\r\n     * @param entityState  动画状态 \r\n     * @param value  值\r\n     */\r\n    public SetAnim(aniState:AniState, value:any){\r\n        if(value){\r\n          this.aniState = aniState;\r\n        }\r\n        if(!this.animationController){\r\n            return;\r\n        }\r\n        this.animationController.setValue(AniState[aniState], value);\r\n        if(aniState == AniState.Move){\r\n          this.MoveHandle();\r\n        }else if(aniState == AniState.Idle){  //空闲\r\n          this.animationController.setValue(AniState[AniState.Move], false);          \r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取动画状态值\r\n     * @param entityState 动画状态\r\n     * @return 值\r\n     */\r\n    // public GetAnim(aniState:AniState) :any {\r\n    //     return this.animationController.getValue(AniState[aniState]);\r\n    // }\r\n\r\n}"]}