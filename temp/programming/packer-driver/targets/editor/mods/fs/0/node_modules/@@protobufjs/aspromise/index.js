System.register(["__unresolved_0"], function (_export, _context) {
  "use strict";

  var _loader, _cjsExports, __cjsMetaURL;

  _export("default", void 0);

  return {
    setters: [function (_unresolved_) {
      _loader = _unresolved_.default;
    }],
    execute: function () {
      _loader.define(_context.meta.url, function (exports, _require, module, __filename, __dirname) {
        let require = _loader.createRequireWithReqMap({}, _require);

        (function () {
          module.exports = asPromise;
          /**
           * Callback as used by {@link util.asPromise}.
           * @typedef asPromiseCallback
           * @type {function}
           * @param {Error|null} error Error, if any
           * @param {...*} params Additional arguments
           * @returns {undefined}
           */

          /**
           * Returns a promise from a node-style callback function.
           * @memberof util
           * @param {asPromiseCallback} fn Function to call
           * @param {*} ctx Function context
           * @param {...*} params Function arguments
           * @returns {Promise<*>} Promisified function
           */

          function asPromise(fn, ctx
          /*, varargs */
          ) {
            var params = new Array(arguments.length - 1),
                offset = 0,
                index = 2,
                pending = true;

            while (index < arguments.length) params[offset++] = arguments[index++];

            return new Promise(function executor(resolve, reject) {
              params[offset] = function callback(err
              /*, varargs */
              ) {
                if (pending) {
                  pending = false;
                  if (err) reject(err);else {
                    var params = new Array(arguments.length - 1),
                        offset = 0;

                    while (offset < params.length) params[offset++] = arguments[offset];

                    resolve.apply(null, params);
                  }
                }
              };

              try {
                fn.apply(ctx || null, params);
              } catch (err) {
                if (pending) {
                  pending = false;
                  reject(err);
                }
              }
            });
          }
        })();

        _export("default", _cjsExports = module.exports);
      });

      _export("__cjsMetaURL", __cjsMetaURL = _context.meta.url);
    }
  };
});
//# sourceMappingURL=index.js.map