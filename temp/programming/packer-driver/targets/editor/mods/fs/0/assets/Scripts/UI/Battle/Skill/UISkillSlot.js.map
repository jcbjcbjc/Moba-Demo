{"version":3,"sources":["file:///D:/LearningFrameWork/MobaYan/Moba/Src/Client/assets/Scripts/UI/Battle/Skill/UISkillSlot.ts"],"names":["_decorator","Component","Sprite","Label","systemEvent","SystemEvent","Vec2","UITransform","MeshRenderer","Color","LoadResUtil","TargetType","BattleManager","OptType","MathUtil","BattleGlobal","SkillTipsType","TeamType2","CreatureManager","LogicRenderConvert","ccclass","property","UISkillSlot","String","start","overlay","enabled","cdText","nodeRect","getComponent","getBoundingBox","radius","width","cancelCastingNodeRect","cancelCasting","node","cancelCastingRadius","on","EventType","TOUCH_START","OnTouchStart","skillStartBgRadius","skillStartBg","TOUCH_END","OnTouchEnd","TOUCH_MOVE","OnTouchMove","updateMaterialColor","pointX","pointY","isCollideFlag","CollidePointAndCircle2","worldPosition","x","y","childrenArr","Instance","MyBattleItemNode","children","i","length","name","RangeBg","SelectedRange","StraightLine","Dir","Sector","getMaterial","setProperty","redColor","normalColor","color","e","moveInFlag","isControlSkill","getLocation","currentMoveVec2","len","GetDistance","startMoveVec2","skillMoveFont","setWorldPosition","xLen","yLen","yuanX","yuanY","setPosition","degree","GetAngle","currentCharacter","teamType2","Blue","dirDegree","selectedRangeNode","smallPos","position","yuanScaleX","yuanScaleY","castRange","skill","Define","CastRange","CastTarget","toString","AOERange","straightLineNode","setRotationFromEuler","dirNode","sectorNode","active","removeChild","isCastSkill","isTouchStart","console","log","CastSkill","cd","getStartLocation","isShowControlBtn","isShowSkillTipsRange","RangeTarget","rangeBgNode","skillTipsMap","get","scale","set","addChild","z","BulletRadius","update","fillRange","CD","string","Math","floor","positionX","logicPosition","positionZ","blowsNum","BlowsNum","creatureArr","FindUnitsInRange","RenderToLogic_Value","frameHandle","optValue2","optValue3","optValue4","opt","Skill","optValue1","skillId","SetSkill","value","icon","spriteFrame","load_local_sprite","Icon"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Rect, Sprite, Vec3, Label, systemEvent, SystemEvent, Vec2, UITransform, MeshRenderer, Color } from 'cc';\r\nimport { LoadResUtil } from \"../../../Utils/LoadResUtil\";\r\nimport { DataManager } from \"../../../Managers/DataManager\";\r\nimport { Skill } from '../Models/Skill';\r\nimport { TargetType } from '../enums/TargetType';\r\nimport { BattleManager } from '../Managers/BattleManager';\r\nimport { OptType } from '../enums/OptType';\r\nimport { SkillType } from '../enums/SkillType';\r\nimport { EventType } from '../../Common/Event/EventType';\r\nimport { MathUtil } from '../../../Utils/MathUtil';\r\nimport { BattleGlobal } from '../Utils/BattleGlobal';\r\nimport { SkillTipsType } from '../enums/SkillTipsType';\r\nimport { TeamType2 } from '../enums/TeamType2';\r\nimport { CreatureManager } from '../Managers/CreatureManager';\r\nimport { LogicRenderConvert } from '../Utils/LogicRenderConvert';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('UISkillSlot')\r\nexport class UISkillSlot extends Component {\r\n\r\n    @property(Sprite)\r\n    public icon:Sprite=null;\r\n    @property(Sprite)\r\n    public overlay:Sprite=null;\r\n    @property(Label)\r\n    public cdText:Label=null;\r\n    @property(String)\r\n    public type:String='';\r\n    @property(Sprite)\r\n    public skillStartBg:Sprite=null;  //技能控制按钮背景\r\n    @property(Sprite)\r\n    public skillMoveFont:Sprite=null;  //技能控制按钮\r\n    @property(Sprite)\r\n    public cancelCasting:Sprite=null;  //取消技能按钮\r\n\r\n    private skill:Skill=null;\r\n\r\n    private overlaySpeed:number = 0;\r\n    private cdRemain:number = 0;\r\n\r\n    private startMoveVec2 = new Vec2();   //开始移动点位置\r\n    private currentMoveVec2 = new Vec2();   //当前移动点位置\r\n    private moveInFlag:boolean = false; //是否移动中\r\n    private radius:number;  //技能按钮半径\r\n    private cancelCastingRadius:number;  //取消技能按钮半径\r\n    \r\n    private skillStartBgRadius:number;  //技能点击按钮半径\r\n    private isTouchStart:boolean = false; //是否触发开始了\r\n    private isControlSkill:boolean = false;  //是否控制型技能\r\n\r\n    private selectedRangeNode:Node;  //选择范围技能\r\n    private straightLineNode:Node;  //直线\r\n    private dirNode:Node;  //方向\r\n    private sectorNode:Node;  //扇形\r\n    private dirDegree:number = 0;  //方向性技能角度\r\n\r\n    // Use this for initialization\r\n    start () {\r\n        this.overlay.enabled = false;\r\n        this.cdText.enabled = false;\r\n        \r\n        //按钮半径\r\n        let nodeRect=this.getComponent(UITransform).getBoundingBox();\r\n        this.radius = nodeRect.width / 2;\r\n\r\n        //取消按钮半径\r\n        let cancelCastingNodeRect=this.cancelCasting.node.getComponent(UITransform).getBoundingBox();\r\n        this.cancelCastingRadius = cancelCastingNodeRect.width / 2;\r\n\r\n\r\n        systemEvent.on(SystemEvent.EventType.TOUCH_START, this.OnTouchStart, this);\r\n        this.skillStartBgRadius = this.skillStartBg.getComponent(UITransform).getBoundingBox().width / 2;\r\n        systemEvent.on(SystemEvent.EventType.TOUCH_END, this.OnTouchEnd, this)\r\n        systemEvent.on(SystemEvent.EventType.TOUCH_MOVE, this.OnTouchMove, this)\r\n    }\r\n\r\n    private normalColor:Color=new Color(255, 255, 255);  //正常颜色\r\n    private redColor:Color=new Color(255, 0, 0, 90);  //红色\r\n\r\n    /**\r\n     * 修改材质颜色\r\n     * @param pointX \r\n     * @param pointY \r\n     */\r\n    private updateMaterialColor(pointX:number, pointY:number){\r\n        //判断移动到技能取消按钮位置\r\n        let isCollideFlag= MathUtil.CollidePointAndCircle2(pointX, pointY, this.cancelCasting.node.worldPosition.x, this.cancelCasting.node.worldPosition.y, this.cancelCastingRadius);\r\n           //修改颜色变红\r\n            let childrenArr = BattleManager.Instance.MyBattleItemNode.children;\r\n            for(let i=0; i < childrenArr.length; i++){\r\n                let node = childrenArr[i];\r\n                if(node.name == SkillTipsType[SkillTipsType.RangeBg] || node.name == SkillTipsType[SkillTipsType.SelectedRange]\r\n                    || node.name == SkillTipsType[SkillTipsType.StraightLine] || node.name == SkillTipsType[SkillTipsType.Dir]\r\n                    || node.name == SkillTipsType[SkillTipsType.Sector]){\r\n                    node.getComponent(MeshRenderer).getMaterial(0).setProperty('mainColor',isCollideFlag ? this.redColor : this.normalColor);\r\n                }\r\n            }\r\n            this.cancelCasting.color = (isCollideFlag ? this.redColor : this.normalColor);\r\n        }\r\n\r\n    /**\r\n     * 技能控制按钮背景触摸移动\r\n     * @param e \r\n     */\r\n    private OnTouchMove(e){\r\n        // console.log('OnTouchMove='+this.moveInFlag)\r\n        if(!this.moveInFlag){\r\n            return;\r\n        }\r\n        if(!this.isControlSkill){\r\n            return;\r\n        }\r\n        e.getLocation(this.currentMoveVec2);   //当前移动点\r\n        //控制按钮移动位置\r\n        let len=MathUtil.GetDistance(this.startMoveVec2.x, this.startMoveVec2.y, this.currentMoveVec2.x, this.currentMoveVec2.y);\r\n        // console.log(len+'==='+this.skillStartBgRadius)\r\n        if(len <= this.skillStartBgRadius){  //圆范围内\r\n            this.skillMoveFont.node.setWorldPosition(this.currentMoveVec2.x, this.currentMoveVec2.y , 0);\r\n        }else{  //圆范围外，求圆上点位置\r\n            let xLen=this.currentMoveVec2.x-this.startMoveVec2.x;\r\n            let yLen=this.currentMoveVec2.y-this.startMoveVec2.y;\r\n            let yuanX= xLen / len * this.skillStartBgRadius;  //圆上x轴\r\n            let yuanY= yLen / len *this.skillStartBgRadius;  //圆上y轴\r\n\r\n            // console.log(this.currentMoveVec2, this.startMoveVec2)\r\n            this.skillMoveFont.node.setPosition(yuanX, yuanY , 0);\r\n        }\r\n        let degree = MathUtil.GetAngle(this.currentMoveVec2.y-this.startMoveVec2.y, this.currentMoveVec2.x-this.startMoveVec2.x);\r\n        if(BattleManager.Instance.currentCharacter.teamType2 == TeamType2.Blue){  //蓝队\r\n           degree = -degree;\r\n        }else {\r\n           degree = 180 - degree;\r\n        }\r\n        this.dirDegree = degree;\r\n\r\n        //更新攻击范围\r\n        if(this.selectedRangeNode){   //选择范围\r\n            let smallPos = this.skillMoveFont.node.position;\r\n            let yuanScaleX = smallPos.x / (this.skillStartBgRadius * 2);\r\n            let yuanScaleY = smallPos.y / (this.skillStartBgRadius * 2);\r\n            let castRange = this.skill.Define.CastRange*2;  //释放范围\r\n            if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.SelectedRange]){  //选择范围\r\n                castRange -= this.skill.Define.AOERange*2;\r\n            }\r\n            this.selectedRangeNode.setPosition((BattleManager.Instance.currentCharacter.teamType2==TeamType2.Blue ? 1 : -1)*castRange*yuanScaleX, this.selectedRangeNode.position.y, (BattleManager.Instance.currentCharacter.teamType2==TeamType2.Blue ? -1 : 1)*castRange*yuanScaleY);\r\n            // console.log((castRange*yuanScaleX) +'==='+ (castRange*yuanScaleY))\r\n        }else if(this.straightLineNode){  //直线\r\n            this.straightLineNode.setRotationFromEuler(-90 ,degree , 0);\r\n        }else if(this.dirNode){  //方向\r\n            this.dirNode.setRotationFromEuler(-90 ,degree , 0);\r\n        }else if(this.sectorNode){  //扇形\r\n            this.sectorNode.setRotationFromEuler(-90 ,degree , 0);\r\n        }    \r\n        this.updateMaterialColor(this.currentMoveVec2.x, this.currentMoveVec2.y);\r\n    }\r\n\r\n    /**\r\n     * 技能按钮触摸结束\r\n     */\r\n    private OnTouchEnd(e){\r\n        //移除控制按钮及背景\r\n        this.skillStartBg.node.active=false;\r\n        this.cancelCasting.node.active=false;\r\n        //移除技能提示范围\r\n        let childrenArr = BattleManager.Instance.MyBattleItemNode.children;\r\n        for(let i=0; i < childrenArr.length; i++){\r\n            let node = childrenArr[i];\r\n            if(node.name == SkillTipsType[SkillTipsType.RangeBg] || node.name == SkillTipsType[SkillTipsType.SelectedRange]\r\n                || node.name == SkillTipsType[SkillTipsType.StraightLine] || node.name == SkillTipsType[SkillTipsType.Dir]\r\n                || node.name == SkillTipsType[SkillTipsType.Sector]){\r\n                BattleManager.Instance.MyBattleItemNode.removeChild(node);\r\n            }\r\n        }\r\n\r\n       if(!this.moveInFlag){\r\n            return;\r\n        }\r\n        this.moveInFlag=false;\r\n\r\n        let isCastSkill=false; //是否释放技能\r\n        //点击结束\r\n        if(this.isTouchStart){\r\n            this.isTouchStart=false;\r\n            //判断是否点击结束\r\n            let isCollideFlag= MathUtil.CollidePointAndCircle2(e.getLocation().x, e.getLocation().y, this.node.worldPosition.x, this.node.worldPosition.y, this.radius);\r\n            if(isCollideFlag){\r\n                console.log('点击结束-------------')\r\n                isCastSkill=true;\r\n            }\r\n        }\r\n\r\n        //判断移动到技能取消按钮位置\r\n      if(this.isControlSkill){ \r\n        let isCollideFlag= MathUtil.CollidePointAndCircle2(e.getLocation().x, e.getLocation().y, this.cancelCasting.node.worldPosition.x, this.cancelCasting.node.worldPosition.y, this.cancelCastingRadius);\r\n        if(isCollideFlag){\r\n            console.log('取消释放技能')\r\n            isCastSkill=false;\r\n        }else{\r\n            isCastSkill=true;\r\n        }\r\n      }\r\n        if(isCastSkill){\r\n            console.log('释放技能')\r\n            this.CastSkill();\r\n        }\r\n\r\n        this.selectedRangeNode=null;\r\n        this.straightLineNode=null;\r\n        this.dirNode=null;\r\n        this.sectorNode=null;\r\n    }\r\n\r\n    /**\r\n     * 技能按钮触摸开始\r\n     */\r\n    private OnTouchStart(e){\r\n        if(!this.skill){\r\n            return;\r\n        }\r\n        if(this.skill.cd > 0){\r\n            return;\r\n        }\r\n        e.getStartLocation(this.startMoveVec2);  //开始移动点\r\n        // console.log(this.startMoveVec2)\r\n        //检测是否点击到技能图标\r\n        // console.log(this.startMoveVec2, this.node.worldPosition, this.radius)\r\n        let isCollideFlag= MathUtil.CollidePointAndCircle2(this.startMoveVec2.x, this.startMoveVec2.y, this.node.worldPosition.x, this.node.worldPosition.y, this.radius);\r\n        if(!isCollideFlag){\r\n            // console.log(\"未点击到图标\")\r\n            return;\r\n        }\r\n        this.isTouchStart = true;\r\n\r\n        let isShowControlBtn:boolean=true;  //是否显示控制按钮\r\n        let isShowSkillTipsRange:boolean=true;  //是否显示技能提示范围\r\n        if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.RangeTarget]){  //范围目标\r\n            isShowControlBtn = false;\r\n        }\r\n           if(isShowControlBtn){  //显示控制按钮\r\n               this.skillStartBg.node.setWorldPosition(this.startMoveVec2.x, this.startMoveVec2.y, 0);\r\n               this.skillMoveFont.node.setWorldPosition(this.startMoveVec2.x, this.startMoveVec2.y, 0);\r\n\r\n               this.skillStartBg.node.active=true;\r\n               this.isControlSkill=true;\r\n           }else{\r\n               this.skillStartBg.node.active=false;\r\n               this.isControlSkill=false;\r\n            }\r\n            this.moveInFlag=true; \r\n\r\n           if(isShowSkillTipsRange){  //显示技能提示范围\r\n                //显示技能提示范围\r\n                let castRange = this.skill.Define.CastRange*2;  //释放范围\r\n                if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.SelectedRange]){  //选择范围\r\n                    castRange -= this.skill.Define.AOERange*2;\r\n                }\r\n                let rangeBgNode = BattleGlobal.skillTipsMap.get(SkillTipsType[SkillTipsType.RangeBg]) as Node;\r\n                rangeBgNode.setPosition(0, 0, 0);\r\n                rangeBgNode.scale.set(castRange, castRange, castRange);\r\n                BattleManager.Instance.MyBattleItemNode.addChild(rangeBgNode);\r\n              if(isShowControlBtn){  //显示控制按钮\r\n                let teamType2 = BattleManager.Instance.currentCharacter.teamType2;\r\n                    //显示技能攻击范围\r\n                if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.SelectedRange]){  //选择范围\r\n                    console.log('选择范围')\r\n                  this.selectedRangeNode = BattleGlobal.skillTipsMap.get(SkillTipsType[SkillTipsType.SelectedRange]) as Node;\r\n                  this.selectedRangeNode.setPosition(0, 0, 0);\r\n                  let AOERange = this.skill.Define.AOERange*2;  //攻击范围\r\n                  this.selectedRangeNode.scale.set(AOERange, AOERange, this.selectedRangeNode.scale.z);\r\n                  BattleManager.Instance.MyBattleItemNode.addChild(this.selectedRangeNode);\r\n                }else if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.StraightLine]){  //直线\r\n                    console.log('直线')\r\n                  this.straightLineNode = BattleGlobal.skillTipsMap.get(SkillTipsType[SkillTipsType.StraightLine]) as Node;\r\n                  this.straightLineNode.setPosition(0, 0, 0);\r\n                  this.straightLineNode.setRotationFromEuler(-90 ,teamType2==TeamType2.Blue ? 0 : 180 , 0);\r\n                  this.straightLineNode.scale.set(this.skill.Define.BulletRadius, castRange , this.straightLineNode.scale.z);\r\n                  BattleManager.Instance.MyBattleItemNode.addChild(this.straightLineNode);\r\n                }else if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.Dir]){  //方向\r\n                    console.log('方向')\r\n                  this.dirNode = BattleGlobal.skillTipsMap.get(SkillTipsType[SkillTipsType.Dir]) as Node;\r\n                  this.dirNode.setPosition(0, 0, 0);\r\n                  this.dirNode.setRotationFromEuler(-90 ,teamType2==TeamType2.Blue ? 0 : 180 , 0);\r\n                  this.dirNode.scale.set(this.dirNode.scale.x, castRange , this.dirNode.scale.z);\r\n                  BattleManager.Instance.MyBattleItemNode.addChild(this.dirNode);\r\n                }/* else if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.Sector]){  //扇形\r\n                    console.log('扇形')\r\n                  this.sectorNode = BattleGlobal.skillTipsMap.get(SkillTipsType[SkillTipsType.Sector]) as Node;\r\n                  this.sectorNode.setPosition(0, 0, 0);\r\n                  this.sectorNode.setRotationFromEuler(-90 ,0 , 0);\r\n                  this.sectorNode.scale.set(5, castRange , this.sectorNode.scale.z);\r\n                  BattleManager.Instance.MyBattleItemNode.addChild(this.sectorNode);\r\n                } */\r\n                //显示取消技能按钮\r\n                this.cancelCasting.node.active=true;\r\n              }\r\n                this.updateMaterialColor(this.startMoveVec2.x, this.startMoveVec2.y);\r\n           }\r\n    }\r\n\r\n    // Update is called once per frame\r\n   update () {\r\n        if (!this.skill) return;\r\n\t\tif(this.skill.cd > 0)\r\n        {\r\n            if (!this.overlay.enabled) this.overlay.enabled = true;\r\n            if (!this.cdText.enabled) this.cdText.enabled = true;\r\n\r\n            this.overlay.fillRange = this.skill.cd / this.skill.Define.CD;\r\n            this.cdText.string = Math.floor(this.skill.cd / 1000)+'';\r\n        }\r\n        else\r\n        {\r\n            if (this.overlay.enabled) this.overlay.enabled = false;\r\n            if (this.cdText.enabled) this.cdText.enabled = false;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 释放技能\r\n     */\r\n    private CastSkill() { \r\n        console.log('CastSkill')\r\n        if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.RangeTarget]){  //范围目标\r\n           //查找范围中的目标\r\n           let currentCharacter = BattleManager.Instance.currentCharacter;\r\n           let positionX = currentCharacter.logicPosition.x;\r\n           let positionZ = currentCharacter.logicPosition.z;\r\n           let radius = this.skill.Define.CastRange;\r\n           let blowsNum = this.skill.Define.BlowsNum || -1;\r\n           let creatureArr = CreatureManager.Instance.FindUnitsInRange(positionX, positionZ, LogicRenderConvert.RenderToLogic_Value(radius), blowsNum, currentCharacter.teamType2, true);\r\n           console.log('RangeTarget count='+creatureArr.length)\r\n           if(creatureArr.length < 1) {\r\n             return;\r\n           }\r\n        }else if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.SelectedRange]){  //选择范围\r\n            // console.log()\r\n            BattleManager.Instance.frameHandle.optValue2 = BattleManager.Instance.MyBattleItemNode.worldPosition.x + this.selectedRangeNode.position.x;\r\n            BattleManager.Instance.frameHandle.optValue3 = BattleManager.Instance.MyBattleItemNode.worldPosition.z + this.selectedRangeNode.position.z;\r\n            BattleManager.Instance.frameHandle.optValue4 = this.dirDegree;\r\n        }else if(this.skill.Define.CastTarget.toString() == TargetType[TargetType.StraightLine] || \r\n                 this.skill.Define.CastTarget.toString() == TargetType[TargetType.Dir] || \r\n                 this.skill.Define.CastTarget.toString() == TargetType[TargetType.Sector]){ //直线、方向、扇形\r\n            BattleManager.Instance.frameHandle.optValue4 = this.dirDegree;        \r\n        }\r\n        BattleManager.Instance.frameHandle.opt = OptType.Skill;\r\n        BattleManager.Instance.frameHandle.optValue1 = this.skill.skillId;\r\n    }\r\n\r\n\r\n    public async SetSkill(value:Skill)\r\n    {\r\n        this.skill = value;\r\n        if (this.icon != null)\r\n        {\r\n            this.icon.spriteFrame = await LoadResUtil.load_local_sprite(this.skill.Define.Icon+'/spriteFrame');\r\n        }\r\n    }\r\n}"]}